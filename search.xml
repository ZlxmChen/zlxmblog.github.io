<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大连旅行指南</title>
      <link href="/2025/06/4e5860b7b936.html"/>
      <url>/2025/06/4e5860b7b936.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4092.jpg" alt="cover"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>关于大连，这是一座有风、靠海、地势起伏、气候温柔的城市，在高低错落的街道之间，在潮湿空气与日光交织的晨昏时分，它自有一份不紧不慢的节奏。<br>这篇文章，是一次步行与观景的记录，是一次避开旺季人潮、顺着海风与阳光旅行的尝试。如果你也正在计划一次不那么浮躁的大连之行，希望这里能提供些实用的参考。</p><h1 id="气候"><a href="#气候" class="headerlink" title="气候"></a>气候</h1><p>大连地处温带季风气候区，兼具明显的海洋性特征。四季分明，湿润多风。夏天不闷热，冬天虽冷，但相比北方内陆城市要温和许多。年平均气温约 10℃，最热的 8 月平均气温约 24℃，极端高温不常见；最冷的 1 月南部地区也基本维持在 -5℃ 上下。全区年平均降水量在 550 至 950 毫米之间，由西南向东北递增。年降水量 60-70% 集中于 6-9 月的夏季，多以暴雨形式降水；春季占 12-15%；秋季占 15-20% ，冬季仅占 5%左右。因受海洋调节，夜雨多于日雨，尤以夏季为甚。特别在降雨较多的月份，频繁出现的海雾会明显影响日出日落的质量，如果以日出日落为主要目标，选择 10-4 月出现较为合适。</p><p>春秋季是公认的最佳旅行时节，尤其是春末夏初，海风清凉，海鸥翻飞。夏天虽热度适中，但也正值游客高峰期。冬天虽也有海景独有的静谧之美，但风大且湿冷，海边体感较差，适合选择更内陆或封闭的活动空间。</p><blockquote><p>📌 若你是为日出日落而来，请避开 6~9 月雨季和多雾季节，10 月到次年 4 月更易收获清澈的天与海。</p></blockquote><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250602143701.png" alt="image.png|400"></p><p>大连的海滩开放时间主要集中在每年 6 月底至 9 月初。禁渔期为 5 月至 9 月初，这意味着在 6-8 月期间，虽能下海但海鲜相对不够丰盛；而 9 月初以后则刚好兼得清凉的海水与肥美的渔获。<br>海鸥的高频出没时间集中在 5-8 月，喜欢拍摄或喂食海鸥可重点关注这段时间。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3197.jpg" alt="DSC_3197.jpg|400"></p><blockquote><p>📷 拍摄于 6 月 1 日，海鸥已成群出现</p></blockquote><p>大连的游客高峰主要集中在“五一”、“端午”、“暑假”、“十一”等节假日，尤其是星海广场、东港、滨海路一线，旺季人流密度极高，酒店价格也水涨船高。例如端午节前 70 元的酒店，节日期间价格可能飙升至 260 元以上。</p><blockquote><p>🎒 如果不是非节假日不可，请尽量避开高峰期，选择 3-6 月或 9-11 月这两个气候适宜又相对安静的窗口期出行。出行前务必关注天气情况，避开大风天和阴雨天可以极大的提高出行质量。</p></blockquote><h1 id="交通与区域指南"><a href="#交通与区域指南" class="headerlink" title="交通与区域指南"></a>交通与区域指南</h1><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250602145105.png" alt="image.png|400"></p><p>大连是座有高差的城市，单行道、小巷道密布，自驾与纯步行都不够友好。地铁虽覆盖主要区域，但并不全面；公交车则班次不密，效率较低。而“出租车黑”已成为游客与本地人都默认的标签。<br>建议以“地铁 + 网约车”的方式为主，尽量避开高峰时段叫车。<br>城市旅游主要可划分为以下几条线路：</p><ul><li><strong>沙滩沿海线（西线）</strong>：从小岗沙滩至琥珀湾，建议用 1.5 天细细走完，以小岗沙滩为界，从小岗沙滩-付家村沙滩-银沙滩-星海湾大桥-星海广场为一天线，棱角湾、渔人码头、琥珀湾为半天线。</li><li><strong>滨海线（东线）</strong>：海之韵及东港栈道沿线，适合清晨和日出时分，建议上午前往海之滨。</li><li><strong>城市建筑线（市中心）</strong>：中山广场、俄罗斯风情街、南山街，适合散步与拍照。</li></ul><p>其他地区大黑石、海纳百川雕塑公园相对较远，建议单独分出半天的时间前往最佳，旅顺需要单独一天以上，更适合第二次来大连旅游的人群。</p><blockquote><p>🏨 推荐住宿区域：<strong>中山区</strong>，交通便利、美食集中且性价比高；<strong>星海广场&#x2F;东港</strong>则适合想要海景房与更好拍照环境的旅人。</p></blockquote><h1 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h1><p>景点部分的评分标准如下：<br>10 分：完美无缺的风景，无论人文、风光或是其他内容，独一无二的游玩体验。<br>9 分：远高于其他地点的体验，但是略有遗憾。<br>8 分：令人眼前一亮的游玩体验，有缺点但是瑕不掩瑜。<br>7 分：较好的游玩体验，适合各种休闲旅行。<br>6 分：及格，可以作为游玩的目的地。<br>5 分：有所欠缺或者平平无奇，体验较好时可以作为旅游目的地。<br>4 分：除非体验极佳，否则不适合作为旅游目的地。<br>3 分：无聊无趣，开始思考为啥来这里游玩。<br>2 分：有点折磨，随便看看赶紧走了。<br>1 分：纯折磨，无法忍受哪怕一秒。</p><p>体验扣分项：人过多、宰客叫卖过多、网红拍照过多。<br>体验加分项：适合拍照、服务较好、符合审美有情调等。</p><h2 id="自然风光"><a href="#自然风光" class="headerlink" title="自然风光"></a>自然风光</h2><blockquote><p>需要注意的是，大连的沙滩大多为沙石滩，想玩沙子只能去较远的金沙滩，不过沙石滩上的石头大多比较圆润，躺着还是挺舒服的。</p></blockquote><h3 id="小岗沙滩"><a href="#小岗沙滩" class="headerlink" title="小岗沙滩"></a>小岗沙滩</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_2335%201.jpg" alt="DSC_2335 1.jpg|400"><br>照片时间点：13 点<br>推荐时间段：涨潮期<br>关键词：礁石、山海景色<br>景点分类：自然徒步，人像摄影<br>推荐拍摄焦段：24mm 全景，35mm&#x2F;85mm 拍人<br>风景指数：6.5 &#x2F; 10<br>体验指数：-0.5（人多略嘈杂）</p><p>作为滨海路线上较小众的一处沙石滩，小岗沙滩山海交融、礁石嶙峋，是许多摄影爱好者喜欢的小景点。涨潮时浪花拍打礁石别有一番壮观，但因小红书热度逐年升高，拍照人群较多，建议早上人少时前往。整体适合短暂停留打卡。</p><h3 id="付家庄沙滩"><a href="#付家庄沙滩" class="headerlink" title="付家庄沙滩"></a>付家庄沙滩</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3276.jpg" alt="DSC_3276.jpg|400"></p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_2949_HDR.jpg" alt="DSC_2949_HDR.jpg|400"><br>照片时间点：15 点<br>推荐时间段：下午至日落<br>关键词：礁石、沙滩、海鸥<br>景点分类：自然休闲<br>推荐拍摄焦段：24mm 礁石，35mm 拍人，300mm+ 拍海鸥<br>风景指数：7.5 &#x2F; 10<br>体验指数：-1（叫卖多、人多、帐篷密集）</p><p>海水清澈，礁石景观丰富，尤其适合喂海鸥。但正因其知名度高，淡季也常有大量游客、叫卖声和拍婚纱照人群，建议错峰出行。可以从小岗沙滩步行前往，作为长线海岸徒步的一个节点。</p><h3 id="星海湾大桥"><a href="#星海湾大桥" class="headerlink" title="星海湾大桥"></a>星海湾大桥</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3368.jpg" alt="DSC_3368.jpg|400"><br><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3459.jpg" alt="DSC_3459.jpg|400"></p><p>照片时间点：17 点<br>推荐时间段：全天，蓝调时段最佳<br>关键词：大桥、视野开阔、灯光秀<br>景点分类：摄影<br>推荐拍摄焦段：30mm 全景，24-85mm 人像，100mm+ 特写<br>风景指数：7.5 &#x2F; 10<br>体验指数：-0.5（拍照人多）</p><p>导航大连森林动物园广场，在路对面可以走小道到达最佳观景点，能远眺星海湾大桥横跨海面。正午海水最通透，日出、日落各有不同色调变化，尤其蓝调时分最为迷人。需要注意的是大桥的路灯时间与灯光秀时间间隔较短，最好路灯一亮立马开拍，拍照人多是唯一扣分项，建议卡点拍完即走。</p><h3 id="星海广场"><a href="#星海广场" class="headerlink" title="星海广场"></a>星海广场</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3796%203.jpg" alt="DSC_3796 3.jpg|400"></p><p>照片时间点：19 点<br>推荐时间段：日落前后、日出<br>关键词：城市广场、灯光秀、咖啡馆<br>景点分类：城市休闲，摄影<br>推荐拍摄焦段：35mm 拍人，100mm+ 人物+大桥特写<br>风景指数：6 &#x2F; 10<br>体验指数：+0.5（咖啡馆氛围好）<br>作为亚洲最大的城市广场，星海广场更适合傍晚时分慢慢闲逛。周边有不少咖啡店和小酒馆，傍海而坐，配合粉紫色天光的日落，是一种闲适的小确幸。游玩结束可以在星海广场站上地铁。</p><h3 id="东港（海之韵附近）"><a href="#东港（海之韵附近）" class="headerlink" title="东港（海之韵附近）"></a>东港（海之韵附近）</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3898.jpg" alt="DSC_3898.jpg|400"><br><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3851.jpg" alt="DSC_3851.jpg|400"><br>照片时间点：5 点<br>推荐时间段：日出<br>关键词：防波堤、木栈道、晨景<br>景点分类：自然休闲<br>推荐拍摄焦段：35-75mm<br>风景指数：7 &#x2F; 10<br>体验指数：+0.5（人少清净）<br>景点分类：休闲漫步<br>这个位置在东港栈道的尽头，靠近海之韵公园的位置，由于相较于东港广场位置较远且中间在维修，各个时间段的人数应该都不会太多，大约有两公里的木栈道可以走，观看日出的人也不算太多，还有不少清晨来赶海的人作为独特的风景线，看日出的话推荐打车前往海之韵营地，日出后沿木栈道往返从海之韵地铁站离开，或者直接前往海之韵公园游玩。走去东海站有点太远了（<br>其他需要注意的是看好天气再出门，不然体验会大打折扣。</p><h3 id="棱角湾-渔人码头"><a href="#棱角湾-渔人码头" class="headerlink" title="棱角湾(渔人码头)"></a>棱角湾(渔人码头)</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3976.jpg" alt="DSC_3976.jpg|400"></p><p>照片时间点：7 点<br>推荐时间段：清晨日出或傍晚日落<br>关键词：深色海水、礁石、出片<br>景点分类：摄影<br>推荐拍摄焦段：85mm+<br>风景指数：7 &#x2F; 10<br>体验指数：+0.5（人少时）</p><p>棱角湾，同时包含两个渔人码头和棱角湾的机位，可以地铁+步行到达，都比较出片，但也都比较吃天气，这个位置的海水比起其他景点会更深邃一些，根据参考热门时段网红拍照的人过多，更适合大清早前往，拍半个小时就可以撤。</p><h3 id="琥珀湾"><a href="#琥珀湾" class="headerlink" title="琥珀湾"></a>琥珀湾</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4092.jpg" alt="DSC_4092.jpg|400"></p><p>照片时间点： 10 点<br>推荐时间段：上午至日落<br>关键词：清澈海水、咖啡馆、沙滩<br>景点分类：自然休闲<br>推荐拍摄焦段：35mm<br>风景指数：6.5 &#x2F; 10<br>体验指数：+1（舒适、安静）</p><p>相比其他景点，琥珀湾的游客数量相对较少，特别是早上的时候，只有三三两两的游客，岸边有出租伞和躺椅的，但是没有到处叫卖比较不错。浅滩可以看到几乎透明的大海，海边的咖啡馆和餐厅都十分出片（但是据说餐食又贵又难吃），很适合舒舒服服的躺一个半天，捡一捡好看的石子。琥珀湾的日落较为出名，可以参考人流量前往。</p><h3 id="大黑石"><a href="#大黑石" class="headerlink" title="大黑石"></a>大黑石</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4221%201.jpg" alt="DSC_4221 1.jpg|400"><br><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4421.jpg" alt="DSC_4421.jpg|400"></p><p>照片时间点： 3 点，6 点<br>推荐时间段：夜晚涨潮、避开正午<br>关键词：蓝眼泪、徒步线、远景<br>景点分类：自然徒步，风光摄影<br>推荐拍摄焦段：24mm&#x2F;35mm<br>风景指数：6.5+1（含蓝眼泪）<br>体验指数：0（交通不便）</p><p>大黑石位于大连市甘井子区营城子镇西部，三面环山，一面临海。海边黑褐色的礁石林立，是“大黑石”名字的由来。登上岩石最高处，可远眺旅顺口的风光。此外，这里还设有多处海水浴场，供游客游泳和休闲。<br>从市区出发车程近 40 分钟（导航望鱼山），而且很难打到回市区的车，回市区的公交大约需要一个半小时-2 个小时的车程，而且半个小时一班。比较适合自驾或者下一站前往旅顺游玩。作为大连最适合的蓝眼泪观光点，每年 5~6 月是蓝眼泪的最佳观测期，需前一晚有明显赤潮迹象。除开蓝眼泪，大黑石附近还有一条山海徒步路线，全程约 4 小时，视野开阔景色也相当不错，但是全程靠近悬崖无遮挡，需要注意安全。（在大黑石回市区的路上可以经过吃海胆的马栏市场和买樱桃的双台沟市场，如果是自驾可以顺路一起游玩）</p><h3 id="东港广场"><a href="#东港广场" class="headerlink" title="东港广场"></a>东港广场</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4564.jpg" alt="DSC_4564.jpg|400"></p><p>照片时间点： 15 点<br>推荐时间段：早晨、淡季全天<br>关键词：木栈道、海鸥、大海<br>景点分类：自然休闲<br>推荐拍摄焦段：35mm<br>风景指数：6.5 &#x2F; 10<br>体验指数：-0.5（人多、叫卖）</p><p>东港区域是大连近年来重点开发的商务新区，拥有现代化的建筑群和完善的配套设施。这里的海岸线延绵，设有长达数公里的木栈道，适合晨跑和散步。此外，东港还设有音乐喷泉广场和国际游艇港，增添了不少浪漫气息。<br>极长的海边栈道，有一望无际的大海和数量众多的海鸥，唯一的问题在于人流密度大，且沿街叫卖的人实在太多了，如果想看海图个清静可以找个人少的时候或者从更靠东边的位置开始逛起，又或者恒力大酒店楼上有个朝海的吧台，吃个便餐看看海或许更加适合。</p><h3 id="港东-5-街"><a href="#港东-5-街" class="headerlink" title="港东 5 街"></a>港东 5 街</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4682.jpg" alt="DSC_4682.jpg|400"></p><p>照片时间点： 16 点<br>推荐时间段：晴朗日能见度高且有大船时<br>关键词：城市与海、远景、拍照地<br>景点分类：城市摄影<br>推荐拍摄焦段：100mm+&#x2F;200mm+<br>风景指数：3.5 ~ 6（看天气）<br>体验指数：-0.5 &#x2F; +0.5（视大船经过）<br>典型的“天气决定一切”地点。若天朗无雾、视野清晰且恰有大船经过，可拍出城市与海的经典融合场景。否则仅是高楼大厦间一条在雾气中消失不见的大马路。完全不必前往。</p><h3 id="其他景点"><a href="#其他景点" class="headerlink" title="其他景点"></a>其他景点</h3><p>海之韵公园：风景较好，晨曦海滩胜在正午清澈的海水和圣象天门胜在壮观的海蚀地貌，但是目前圣象天门封闭，且爬上爬下全程近 4 小时。<br>银沙滩，在星海湾大桥边，沙滩和海水无功无过，主要好看的是未到沙滩的一个转角，人少比较出片。<br>棒棰岛，海滨浴场，门票 20，人相对较少，适合天气晴好或者适合下水的时候前往。</p><h2 id="人文建筑"><a href="#人文建筑" class="headerlink" title="人文建筑"></a>人文建筑</h2><h3 id="1986-花园酒店（俄罗斯风情街）"><a href="#1986-花园酒店（俄罗斯风情街）" class="headerlink" title="1986 花园酒店（俄罗斯风情街）"></a>1986 花园酒店（俄罗斯风情街）</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4168.jpg" alt="DSC_4168.jpg|400"></p><p>照片时间点： 13 点<br>推荐时间段：下午或早晨<br>关键词：俄式建筑、外观拍摄<br>景点分类：城市休闲，摄影<br>推荐拍摄焦段：35mm&#x2F;50mm<br>风景指数：6.5 &#x2F; 10<br>体验指数：0<br>俄罗斯风情街本身较为商业化，但 1986 花园酒店安静、人少、建筑漂亮，适合建筑摄影或人像。可搭配俄罗斯风情街门口的大连美术馆一同游览。</p><h3 id="中山广场"><a href="#中山广场" class="headerlink" title="中山广场"></a>中山广场</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3823.jpg" alt="DSC_3823.jpg|400"></p><p>照片时间点： 21 点<br>推荐时间段：午后或傍晚<br>关键词：欧式建筑、文化街区、美食<br>景点分类：城市休闲<br>推荐拍摄焦段：35mm&#x2F;50mm<br>风景指数：5.5 &#x2F; 10<br>体验指数：0<br>百年建筑环绕的广场，可顺路感受大连的历史文化脉络。吃饭点众多，适合饭后来散步一圈，周边的鲁迅图书馆分馆也可小坐片刻。（有 Wifi 但是连不上，定点充电，包寄存）</p><h3 id="南山街"><a href="#南山街" class="headerlink" title="南山街"></a>南山街</h3><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4528.jpg" alt="DSC_4528.jpg|400"></p><p>照片时间点： 16 点<br>推荐时间段：下午、天气晴好<br>关键词：文艺街区、咖啡馆<br>景点分类：城市休闲，人像摄影<br>推荐拍摄焦段：35mm<br>风景指数：6 &#x2F; 10<br>体验指数：-0.5（网红过多）</p><p>典型的网红街区，外表文艺，内里一般。适合拍照打卡，但不建议抱太大期待。若恰好路过，可停留片刻喝杯咖啡。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>景点</th><th>风景指数</th><th>体验指数</th><th>个人推荐星级</th><th>推荐游玩时长</th><th>概括</th></tr></thead><tbody><tr><td>小岗沙滩</td><td>6.5</td><td>-0.5</td><td>⭐⭐⭐⭐</td><td>1</td><td>山海交融，热门拍照地，适合短暂停留。</td></tr><tr><td>付家庄沙滩</td><td>7.5</td><td>-1.0</td><td>⭐⭐⭐⭐</td><td>1.5</td><td>长滩清澈，适合喂海鸥但人多嘈杂。</td></tr><tr><td>星海湾大桥</td><td>7.5</td><td>-0.5</td><td>⭐⭐⭐⭐</td><td>1</td><td>拍摄蓝调大桥首选，但人多需避峰。</td></tr><tr><td>星海广场</td><td>6.0</td><td>0.5</td><td>⭐⭐⭐</td><td>1</td><td>适合闲逛，咖啡馆和灯光点缀日落。</td></tr><tr><td>东港（海之韵附近）</td><td>7.0</td><td>0.5</td><td>⭐⭐⭐⭐</td><td>1</td><td>晨曦中静谧的木栈道，日出佳选。</td></tr><tr><td>棱角湾(渔人码头)</td><td>7.0</td><td>0.5</td><td>⭐⭐⭐⭐</td><td>0.5</td><td>出片，建议早晨避开人流。</td></tr><tr><td>琥珀湾</td><td>6.5</td><td>1.0</td><td>⭐⭐⭐⭐⭐</td><td>1+</td><td>清晨人少海清，适合放松与拍照。</td></tr><tr><td>大黑石</td><td>6.5+1</td><td>0.0</td><td>⭐⭐⭐⭐</td><td>1</td><td>蓝眼泪观测点，自驾更佳，海景壮观。</td></tr><tr><td>东港广场</td><td>6.5</td><td>-0.5</td><td>⭐⭐⭐</td><td>1</td><td>漫步赏海鸥，需避旺季与叫卖声。</td></tr><tr><td>港东 5 街</td><td>3.5</td><td>-0.5</td><td>⭐⭐</td><td>0.5</td><td>需好天气配合，城市海景有待运气。</td></tr><tr><td>1986 花园酒店</td><td>6.5</td><td>0.0</td><td>⭐⭐⭐⭐</td><td>0.5</td><td>德俄建筑优雅，适合建筑爱好者。</td></tr><tr><td>中山广场</td><td>5.5</td><td>0.0</td><td>⭐⭐⭐</td><td>0.5</td><td>欧式建筑与图书馆，吃逛皆宜。</td></tr><tr><td>南山街</td><td>6.0</td><td>-0.5</td><td>⭐⭐⭐</td><td>1</td><td>文艺风街区，适合拍照与随走随停。</td></tr></tbody></table><h1 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h1><h2 id="向日葵拉面"><a href="#向日葵拉面" class="headerlink" title="向日葵拉面"></a>向日葵拉面</h2><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_3815.jpg" alt="DSC_3815.jpg|400"><br><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4697.jpg" alt="DSC_4697.jpg|400"><br>推荐菜品：豚骨拉面，南蛮鸡<br>推荐指数：⭐⭐⭐⭐✨<br>人均：50</p><p>他们家的豚骨拉面真是一绝，肉肥而不腻入口即化，面汤浓厚而清淡，味道极鲜，有一种大道至简的味道，南蛮鸡做的也很不错，鸡葱串火候刚好，相当推荐。</p><h2 id="庄内软炸猪排饭庄"><a href="#庄内软炸猪排饭庄" class="headerlink" title="庄内软炸猪排饭庄"></a>庄内软炸猪排饭庄</h2><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_4101.jpg" alt="DSC_4101.jpg|400"></p><p>推荐菜品：猪排盖饭<br>推荐指数：⭐⭐⭐⭐<br>人均：60</p><p>猪排现点现做，有反馈说招牌的厚切猪排套餐略腻，所以点了猪排盖饭，没什么特殊的，就是单纯地好吃，不腻。</p><h2 id="鳗道乐"><a href="#鳗道乐" class="headerlink" title="鳗道乐"></a>鳗道乐</h2><p>推荐菜品：鳗鱼三吃<br>推荐指数：⭐⭐⭐⭐<br>人均：60</p><p>根据推荐大连鳗鱼饭最出名的大抵是翔峰与鳗七七，但当天实在跑不动了就近找了家，口味意外的不错，表皮焦香，肉略瘦了一点，鳗鱼三吃还是更喜欢第一吃的味道。</p><h2 id="马栏市场"><a href="#马栏市场" class="headerlink" title="马栏市场"></a>马栏市场</h2><p>推荐：诚信海鲜（下地铁进市场左手 20 米左右）<br>推荐指数：⭐⭐⭐⭐<br>人均：单海胆 25 上下</p><p>小红书推荐诚信海鲜，海胆相当新鲜肥美，老板人也很好，市场里还有不少水果店可以逛一逛。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>相比起被打卡地图引导的“去哪拍”、被攻略量化的“值不值”，大连更适合以“天气如何”“人多不多”“有没有让我想多坐一会儿”的角度来旅行。大连就是一座适合这样缓缓走、慢慢看的城市。愿你也能在山海之间，找到属于自己的片刻宁静。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点<a href="https://github.com/ZlxmChen/zlxmblog.github.io">仓库</a>的 star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从城市尺度设计看北京与阿那亚</title>
      <link href="/2025/04/4cd222ddaa3a.html"/>
      <url>/2025/04/4cd222ddaa3a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_aranya.jpeg" alt="cover"><br>很多人漫步在城市之中时，并没有意识到，自己对一座城市的“喜欢”或者“抗拒”，有时候，并不是因为那里的经济条件、文化氛围或者房价水平，而仅仅只是——城市尺度不对。</p><h3 id="北京的城市尺度"><a href="#北京的城市尺度" class="headerlink" title="北京的城市尺度"></a>北京的城市尺度</h3><p>我们从一个北京最日常的例子说起：知春路地铁站。它位于海淀区北四环以内，周围是密集的高校区。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250421222748.png" alt="image.png|400"></p><p>在地图上看大概是这样子：</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250421223452.png" alt="image.png|400"></p><p>地图东北角的那片区域，是一所高校的学生公寓，住着约 3500 名学生。理论上，这应该是一个人流充沛、商业活跃的街区——但实际上呢？如果你想从宿舍去西南角吃个饭，比如那家不错的新疆餐厅，或者小汉堡店，你需要从宿舍楼下一路绕行，从封闭的公寓围栏找到唯一的出口，再跨过一座 30 米宽的天桥，穿过一大圈市场中划定的路线，才能抵达对面。而这，还是最“近”的路线。</p><p>走一趟就会发现，这条看似方便的大马路，其实是人与人之间的隔阂。双向八车道，加上辅路、人行道，街道两侧建筑物之间的实际距离，超过了 60 米——你永远看不清街对面的招牌，也丧失了探索的乐趣。</p><p>人眼目视范围虽然大，但是引起注意力的范围只有周边十几米。而且人类喜欢探索那些小角落和隐秘地方 ，宽大的街区会让人失去探索欲。通常超过18米的街道间隔使人不再愿意前往对面探索，从这一点上来说，北京绝大多数耳熟能详的商业街区都是“反人类”的代表。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250421230051.png" alt="image.png|400"></p><p>这不是偶然，而是北京以及一系列大城市规划的通病，宽马路下，路边店铺很难生存。台湾人气知友“Yolfilm”说：</p><blockquote><p>“任何商業街的馬路，超過十八米寬（六線道），就會造成「隔絕效應」。街道這邊的人流，過不去街的對面。在台灣，真正好的商業街，最寬四線道。沒人會在六線道的馬路兩側發展商業區，有這種馬路阻攔，商區一定只發展半邊。一般來說，哪邊先發展，哪邊就一路贏到底。幾幾乎，不可能有兩邊都紅火的可能。要兩邊紅火，就必要有特殊辦法，比如地下道，利用地下道的商鋪，把街兩邊連起來。上海徐家匯是最好的例子。最好的反例，當然是西安的西大街，改造成寬馬路後，一邊死了。只因為人群會紮堆，會湊熱鬧，要他們自動分流到馬路兩邊，有違人的天性。這是作生意，租店面，選地點的基本常識”。</p></blockquote><p>一组对比图，你就能直观感受到世界其他城市街道的尺度与北京之间的差异：</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250421225425.png" alt="image.png|400"></p><p>而北京，几乎成了“城市隔离”的代表。它的街区被一个又一个封闭住宅、科研单位、大型商场切割，每一个建筑体量巨大，围墙高高筑起。上文提到的高校，占地边长竟然高达 1.3 公里，对外毫无通达性。走在这样的城市里，你会觉得自己不是在城市里生活，而是在高墙之间穿行。路网中的公共路网被各种机关单位所霸占，城市由一块块巨大的“故宫”拼凑而成，大尺度、简单粗暴的规划，消除了城市的自发生长动能。</p><h3 id="宽街无闹市"><a href="#宽街无闹市" class="headerlink" title="宽街无闹市"></a>宽街无闹市</h3><p>人们逛街更喜欢太古里那样的露天小街巷，而不是终日看不到阳光的大商场。因为街道是生活场所，商场只是功能场所。一些城市管理者把商业简单理解为室内大商场，他们忽视了真正的街道提供的，不仅仅是简单的商品买卖，还有社交平台、公共演出、公共艺术、公益设施、城市风景、艺术展示、运动健身等诸多丰富内容。北京并非没有正面案例，比如三里屯 Village 就非常成功，成为国内国际知名的人气潮流街区。秘诀就在于“<strong>营造小街巷的感觉</strong>”：</p><blockquote><p>4003 年，香港建筑事务所欧华尔开始为三里屯区的两个地块进行总体规划和建筑设计，在地块的限高和容积率的控制下，垂直集中式商业布局被否定了，设计事务所决定采用<strong>步行商业街区</strong>的模式，将十多栋低层建筑组合起来，建筑的高度和风格各异，因而形成不同的空间和视觉感受，但同时维持<strong>宜人的空间尺度</strong>； 许多通道、巷子、小径和庭院，纵横交错环绕于其间，同时形成城市广场。俗话说：“宽街无闹市”。在这种模式下，商铺被安排在相对小的空间里，不容易留下死角。同时也给人造成人群熙熙攘攘的效果。</p></blockquote><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250421231344.png" alt="image.png|400"></p><p>“宽街无闹市”，不是一句口号，而是城市肌理的基本逻辑，北京的“宽马路，疏路网”对于城市的步行体验是摧毁性的。“人作为步行者活动时，一般心情愉快的步行距离为 300 米，超过它时，根据天气情况而希望乘坐交通工具的距离为 500 米；再超过它时，一般就可以说是超出建筑范畴的尺度了，会不利于城市的商业气氛。”</p><p>街道从来不仅仅是“通行”工具，它是生活的载体，是城市的血管。小尺度街区可以容纳更多设计感和个性，城市是我们的母体，我们需要的是人性的尺度、能够遮蔽掩护我们的场所，让我们有安全感和愉悦感。城市规划应该为普通市民服务，随处可见的商业外摆和摊贩、开放的街头艺术，普通民众可以在自己的城市中路边休憩、聚会趴体、街拍玩耍，还有各种跳蚤集市、才艺表演。人们需要的是适合步行的宜人街区，而不是更宽的马路和更长的围栏。</p><p>北京，或许拥有全国最丰富的文化资源与政策优势，但它的“尺度”，却常常让人望而却步。主干道宽阔得像要通往另一个世界，街区的边界被高墙与围栏划得清清楚楚，步行者的路径却总是被切割、被驱赶，像是不属于这座城市的“临时访客”。</p><p>走在北京的大街上，你会发现这里的城市路网早已被疏离化严重。主干道无尽地延伸，看似高效，但却失去了人与人之间自然碰面的可能。而真正属于公共活动的空间，却零星得可怜。那些原本应当承载城市日常、文化生活与市井交流的街道，如今大多只是为了让车辆通行得更快——它们的设计由工程师主导，目标是效率而非生活。这种理念，仿佛还停留在几十年前，一个“车即城市中心”的时代。</p><p>而就在同一个时代的尾声，越来越多城市开始了“窄街区”的实验。从成都的东郊记忆，到杭州的运河街区，再到西安的大华1935，大家都在悄悄往一个方向靠拢：更小的尺度、更高的可达性、更强的可识别性。这不是简单的“文创改造”，而是一种对于现代城市病的集体反思。它提醒我们，城市不该只是高楼和交通工具的容器，更应该是让人愿意走出来、停下来、聊起来的空间。</p><p>事实上，全国很多新建的文化街区已经开始尝试维持宜人的街道尺度，也取得了不小的成功。那么问题来了：为什么我们不能把这些成功经验，真正带回日常的街道中？</p><p>街道，从来不只是通行的过道。它们是城市文化的根，是社会情感流动的脉络，是一个新区能否真正“活起来”的决定性要素。可惜的是，如今太多新城街道，看起来干净利落，实则毫无烟火。人气之所以聚不起来，是因为住宅区越做越大、围墙越拉越高、马路越修越宽，商场综合体越建越像“封闭宇宙”。这一切都服务于车辆、资本与效率，却忘记了人的尺度。</p><p>城市规划试图掌控一切，把城市切割成一个个巨大的功能区。道路宽阔、地块整齐、流程高效，开发商乐见其成，行政管理也省事不少。只是，人作为生活者的感受，在这一过程中被一再延后。而那些真正需要与城市共处、在白天走进街道、在夜晚生活其间的普通人，却失去了属于自己的街区。</p><p>城市不该是巨构堆叠的冷峻体系，而应该是生活的容器，是人可以触摸、可以感知、可以记住的地方。这不仅是尺度的问题，更是我们如何理解“城市”本身的问题。街道不能只是某些文化项目中的“加分项”，它理应成为城市肌理中最基本的构成。</p><p>街区制能激发民间经济活力，天然契合市场经济。可惜的是，在很多城市，尤其像北京这样的大型都市，我们却越来越远离了这种生活方式。写字楼中的人们，为了房贷奔波，为了绩效考核拼命，忍受着996的节奏。他们被困在高强度、低自由的生活循环里，真正能用来“走进街道、拥抱生活”的日子，一年算下来，可能不过五十天。我们无法准确分辨，到底是城市的尺度逼迫人们选择这样的生活，还是这样的生活催生了这样的城市设计。那么究竟何为因，何为果？我们不得而知，但无论如何生活在其中的，终究是“人”。人不是机器。就像其他生物一样，我们也有天生的本能：追求舒适，渴望温暖，喜欢阳光下的慢步调与随处可见的惊喜。我们希望所居之处，不只是“可达”，而是“可感”；不只是“能通行”，而是“能生活”。所以，他们开始逃离北京。他们离开高楼林立、道路宽阔却步履维艰的城市核心，去寻找一个属于自己的“疗愈之地”——或许是阿那亚，或许是大理，或许是淄博，或许是廊坊，也可能是更遥远、更不起眼的角落。归根到底，人们想要的不是远离城市，而是回到城市本来的模样：有温度、有空间、有生活感。</p><blockquote><p>虽然三十多年来城市交通规划理论研究和实践经验已取得长足进步，但我国城市交通规划设计技术标准与规范修订严重滞后，大部分还基本沿用前苏联的。现行规范标准要求的大城市道路网密度上限也仅有 7.5 公里&#x2F;平方公里，只有发达国家城市路网实际密度的 1&#x2F;3。以至三十多年来规划建设的城市新区新城路网密度依然严重不足。</p></blockquote><h3 id="阿那亚的社区设计"><a href="#阿那亚的社区设计" class="headerlink" title="阿那亚的社区设计"></a>阿那亚的社区设计</h3><p>那我们再把视线转向阿那亚，和北京不同，这里的社区设计始终贯彻“人”的尺度。</p><p>在阿那亚，没有横在你和街角咖啡店之间的八车道，没有难以逾越的绿化带。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_2266.jpg" alt="DSC_2266.jpg|400"></p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_1364.jpg" alt="DSC_1364.jpg|400"></p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_2259.jpg" alt="DSC_2259.jpg|400"></p><p>那些街边的小店，不只是“取外卖”的地方，它们更像是朋友家楼下那家你永远知道味道的小店，是你随时可以停下脚步聊天、发呆、坐着晒太阳的生活节点。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_1160.jpg" alt="DSC_1160.jpg|400"></p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_1639.jpg" alt="DSC_1639.jpg|400"><br>、<br><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/8D2A384B-9939-45C8-8641-014879541BB4_1_102_o.jpeg" alt="8D2A384B-9939-45C8-8641-014879541BB4_1_102_o.jpeg|400"></p><p>更重要的是，社区的道路不再是“墙里墙外”的区别，而是一条条真正开放、通透的路径，你可以随意穿行，没有封闭、没有障碍。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_2299.jpg" alt="DSC_2299.jpg|400"></p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/DSC_1392.jpg" alt="DSC_1392.jpg|400"></p><p>还有那些每隔几百米就出现一次的社区巴士，串联起生活的方方面面，无论是便利店、杂货铺、咖啡馆，还是书店、海边市集、小食档，都可以轻松抵达。不用刻意规划路线，更不必依赖导航——你知道，转个弯就有惊喜。街边随处可见的贩卖机、小摊贩，也为日常增加了许多烟火气。渴了能立刻买瓶冰水，饿了能随手来点热食，有时不过是为了在黄昏的街头停下来，看一眼风吹树动的光影流转，也觉得满足。阿那亚所呈现的，不只是一个充满文艺气息的滨海小镇。更像是一种久违的“社区”日常——那种在许多非一线城市里长大的人们早就习惯的生活节奏：出门就是生活，无需开车，无需绕远，更无需计划。一步一景，街角就有故事，生活与人紧密交织。不同的是，阿那亚用一种更加克制、简约甚至审美化的方式，把这种熟悉感“重新设计”了出来。它并不复杂，也不高调，但却温柔地提醒我们：真正理想的城市，从来不是功能堆叠后的巨大拼图，而是可以自在穿行、随时停留、慢慢生活的地方。</p><p>诚然，许多城市的老城区依然能带来类似的体验，那些错落有致的小街巷、街边的小摊贩和藏在角落里的老店铺，依然散发着生活的气息。但在现实中，老城区往往是被城市“遗忘”的角落，它们不是发展的重点，而是等待腾退的对象。明明城市的毛细血管——那些连接日常生活的街道和街区——才是最重要的基础设施，可在投资和关注上，它们却始终被边缘化。更常见的做法，是以“大拆大建”的方式来取而代之：一片街区被推倒，换来一组围墙高筑、尺度巨大的住宅小区，或是一个体量庞然的大型商场。我们以为这叫“更新”，却忘了更新不该是抹去，而是延续，是在原有生活肌理上，生长出新的可能。阿那亚的街区，同样是规划出来的，但它的不同之处在于，它从一开始就不是奔着人流量、招商率、转化率而去，而是在思考：如何构建一个真正服务社区的日常场景，一个让人愿意久留的空间。</p><p>北京并不是从未拥有过街区，只是那些曾经鲜活的街区，逐渐被高房价的浪潮湮没。许多本应修缮更新的老屋，因为拆迁成本居高不下，被长期搁置，沦为城市记忆中无人问津的角落。而那些“幸运”地进入视野的区域，也往往在巨大的经济压力下，被迅速转化为商业街、文旅项目——拆掉的是街区，补上的却是财务缺口。于是，复制粘贴般的咖啡馆、美食街接连出现，却少有人真正关心：这些空间究竟是为谁而建？它们是否回应了街区原本的生活逻辑与日常需求？在以利润为导向的城市更新中，街区原有的温度与烟火气成了最容易被牺牲的部分。而那些继续被遗忘的街区，则深陷沉默与压抑，住在其中的人们如同困在“棺材楼”里的影子，被生活的重压压得喘不过气。</p><p>若放眼全球，与北京最相似的便是华盛顿特区，其政务区内如国家广场一带确实以宏大的国家象征尺度为主，不适合日常步行生活，但这并非居民主要活动区域。华盛顿的日常生活更多体现在卡皮托尔山、乔治城等住宅社区中——这些街区街道尺度宜人，保留了街角商店、小型公园等生活设施，并且受益于“1910高度法”对建筑高度的严格控制，整体城市天际线低平，阳光充足、通风良好，体现出典型的“人本尺度”规划理念。</p><blockquote><p>2004年到2015年，著名规划师赵燕菁执掌厦门规划工作的十年时光，走马上任，他做的第一件事就是按照规划领域普遍认可的“开放式小街区”理念，矛盾因此不可阻挡地爆发了。 首先开发商拒绝拿地，原因是没办法提供公共服务； 领导嫌他没事找事，给本就紧张的地方财政增压； 百姓怪他拆除围墙，拉低了厦门小区的档次。<br>规划刚刚调整，开发商就找到了厦门市规划局。“你这都是小街区，地我不拿了。 原本都是大街区，你非要规划一条路穿过去，我的小区服务还怎么提供？ 一个街区就那么几个人，我能为几个人修一个游泳池、一个小学吗？ ”<br>市里的领导怒气冲冲地跑到了规划局。“你们规划局怎么这么落后，你看人家别的城市小区多大，像一个个公园，里面绿树成荫，鲜花盛开，又安静又安全，可以在里面打太极拳，你们规划的小区一抬脚就出门上街了。 ”各个部门的领导们紧跟着给规划局发难，要求给自己单位的办公楼外建个围墙。 “你看中央机关哪个不把自己围得严严实实的？ 以前建设部还开放前面的广场，后来不也给自己围起来了吗？ ”居民也跑到规划局“登门拜访”，他们提出，开放的小区没法管理，要申请建设围墙。 原因是物业公司拒绝为开放式小区提供服务； 其他小区有围墙，小偷就会跑到开放的小区行窃。“这些小区没有规划围墙，所以规划局不同意新建围墙。 我们不同意居民就上访，每次上访的结果都是居民胜出。 ”赵燕菁苦笑，这件事折腾到最后，厦门的公安部门干脆发文要求，所有有条件的小区都要进行封闭。</p></blockquote><p>在海淀的高校中的前2年，我对周边1-3公里内的店铺所知甚少，其原因很大一部分是巨大的路网与封闭的街区使得到达任何一家店铺都格外的困难，步行太远，共享单车无法频繁的停放，从而失去了探索周边的乐趣。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/166C8C45-3DFE-43DB-945F-2FFA57C04FCB_1_201_a.jpeg" alt="166C8C45-3DFE-43DB-945F-2FFA57C04FCB_1_201_a.jpeg|400"><br><em>可以看到虽然探索范围广了许多，但是依然只能沿着大马路寻找</em></p><p>直到购置了自行车，才有了转机。我开始在周末或黄昏时分骑行穿街走巷，20分钟内穿过三四个街区，突然之间，城市变得可亲可感了——那些我以为不存在的店铺、咖啡馆、旧书店、早点摊，静静地等着被发现。街道不再是必须“通过”的功能性通道，而是可以停下来感受生活的空间。</p><p>我们真正需要的，从来都不是一条条更宽的马路，而是一个个可以停下来的街角——可以停脚，也可以停心。那些可以散步、可以聊天、可以被生活慢慢填满的地方。</p><p>试着想象一下——如果阿那亚不是海边独立的乌托邦，而只是北京某个街区的一种常态，会怎样？</p><p>不需要动辄上千万的海景房，更窄的街道使临街住宅不需要更宽的围栏来隔绝人流与噪音；不需要琳琅满目的高端商业，街角的杂货铺、楼下的小饭馆、各种稀奇古怪的小商铺足以激起人的探索欲；也不需要精致昂贵的下午茶、live house，烧烤摊、小酒馆，一样可以装下人间烟火。更不需要洋气的citiwalk与摆拍，下楼溜个弯儿不应该是生活的常态吗？北京的胡同曾是城市烟火气的代表，但到了今天却成了被高高挂起的“文化街区”，大部分生活在这座城市中的人们需要来回近3小时才能短暂的享受本该就在楼下的“烟火气”，多么荒诞而可笑呀。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20250422005111.png" alt="image.png|400"><br><em>首尔街头</em></p><p>我们不要求每个街区都像阿那亚那样整洁、克制、审美在线，但起码可以拥有——一种“有人味”的可能：房子之间留出穿行的小路，楼下有熟悉的摊主在叫卖，朋友来了可以下楼遛弯，不需要开车、绕路、导航，只需要走几步，阳光就能洒在肩上。</p><p>城市，不该只是钢筋水泥的森林。它是人们一起生活、彼此遇见、共同呼吸的场所。如果尺度错了，人哪怕进来了，情感也无从安放。</p><p>所以，让街道重新变得温柔，让空间重新属于人，而不是只是车。城市的未来，或许不在扩张的边界，而在那些可以回头驻足的街角。</p><p>以人为本，才是城市设计的真正出发点与归宿。</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>当然，城市尺度的设计从来都不是一件简单的事。北京所承载的特殊历史背景与发展路径，也决定了街区格局的改变并非朝夕之间可以完成。</p><p>“窄马路、小街区、密路网”并不是包治百病的灵药，行人与私家车的博弈仍在继续，城市规划始终充满挑战——不同区域的居民有着不同的诉求，开车的人和骑车的人所需各异，甚至同一个人，在一天中不同时间段的需求也在不断变化。而且，城市规划的成败，往往也并不能直接决定城市的兴衰。</p><p>但即便如此，我们依然需要回到那个最朴素的问题上：这座城市，究竟适不适合人居住？它目前的城市规划，是不是真的以“人”为本？</p><p>如今，人人都在高喊“以人为本”的口号，但实践中却常常偏离初衷。要么是彻底忽略人的基本需求，用冰冷的成本控制与效率逻辑粗暴规划人的路径；要么是陷入对某些使用场景的机械拟合，拘泥于形式的高效，却忽视了人群的能动性、互动性与对空间的自主再创造。这样的规划，不是为人服务的空间，而是一种对人的规训。而任何脱离人的空间，终将在时间中被人所遗弃。</p><blockquote><p>著名建筑师格罗培斯曾为迪士尼乐园设计路径，他没有提前修建人行道，而是先在草地上撒下草籽，让人们自由通行。半年后，草坪上自然踩出了一条条或宽或窄、形态各异的小路。第二年，行人道就沿着这些“被踩出来的路径”铺设而成。1971年，这一方案在伦敦国际园林建筑艺术研讨会上被评为世界最佳设计——这不仅是智慧，更是尊重。</p></blockquote><p>当阿那亚这样一个以度假为定位的社区，逐渐成为大量北京人情感上的“理想生活”寄托时，说明问题早已不止是逃离那么简单。人们或许离不开北京提供的就业机会，但潜意识里，他们始终在寻找一种更温柔、更有尺度的城市生活方式。在离北京不远的那片新区，一种围绕“窄路网”展开的新式规划正在兴起，但能否凭借规划的力量真正孕育出活力，还需时间验证。</p><p>当你在北京感到不适时，不妨去其他地方走走——不论是国内，还是国外，一座城市是否宜居，不需要高深的理论与高大上的名词。花一些时间在街道间而不只是旅游景点感受一下，你或许会发现，即便是同为一线城市，上海、广州、杭州等地在城市规划方面显得更加宜居。它们各有风格，但有一个共同点：在那里，生活不仅仅是谋生，更可以是身心的安放之地。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zhihu.com/question/549539904/answer/2836937246">为什么我觉得北京没有大家说的那么繁华？ - 风清扬 2094 的回答 - 知乎</a><br><a href="https://m.sohu.com/a/363461884_175523?_trans_=010004_pcwzy">思想者 | 中央推广四年：“街区制”咋就那么难！ - 搜狐网</a><br><a href="https://www.zhihu.com/question/366333309/answer/3221863706">为什么中国的城市规划一直坚持“宽路疏网”的设计？ - Striveforv的回答 - 知乎</a></p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点<a href="https://github.com/ZlxmChen/zlxmblog.github.io">仓库</a>的 star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我思故我在 </tag>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 Best10 记录打动我们的一瞬</title>
      <link href="/2024/12/77c567160941.html"/>
      <url>/2024/12/77c567160941.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_image.png" alt="cover"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>不知不觉已经是第四年整理 Best 10 了，2024 年的 Best 10 相比前些年难选了不少，一方面是今年确实比较忙，没有什么大块的时间出门转转，另一方面这是今年对于摄影有了一些新的感受，也想借着 Best 10 记录一些今年重要的时刻和想法。由于 12 月发生了不少事情，Best 10 删去了一些照片，也又因此补充了一些，最终照片的数量定格在了 9 个时刻，也算是今年的一点遗憾吧。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/E6FD4FD6-FC19-4E1B-B2A6-E756B0D5DA1A_1_105_c.jpeg" alt="E6FD4FD6-FC19-4E1B-B2A6-E756B0D5DA1A_1_105_c.jpeg|500"></p><pre><code>📅 2024.02📍 浙江省丽水市松阳县📷 NIKON Z6 | 70mm</code></pre><p>对于家乡，或者说泛家乡的浙南闽北一带，多数知名的景点大多已经在来北京求学前踏足，而回家乡的时候的时候便会对着地图摸索，去一些不太熟悉的地方去试着探索一番。松阳有着最典型的浙南的风貌——丘陵、溪流、古桥与古镇，还有始终蒙眬盘旋的雾气，如果说和其他的江南景致所对比的话，大概胜出一番的便是他少去的那一部分热门景区的喧闹喇叭、大红招牌与拥挤的人流。没有刀砍斧劈的自然奇观，也没有“美到失语”的花海麦浪，just dive into it, and it will show you what is calm, soothing and a hint of warmth.</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20241227165052.png" alt="image.png|500"></p><pre><code>📅 2024.05📍 北京市怀柔区雁栖湖路📷 iPhone 13 | 26mm</code></pre><p>在诸多的代步工具里如果让我纯按乐趣排个名的话，大概会是汽车&gt;自行车&gt;滑板&gt;电动车。对于范围相近的两种代步工具自行车和电动车而言，自行车有着更大的改装空间、相近的速度（国标）和更好的操控感。趁着春夏之交不太热的间隙，跑了一趟雁栖湖，也顺便达成了在河边骑 Riverside 的奇怪成就。在一个晴好无风不太热的天气里沿着湖畔骑行，还有比这更享受的事情吗？</p><h3 id="赤峰自驾之旅"><a href="#赤峰自驾之旅" class="headerlink" title="赤峰自驾之旅"></a>赤峰自驾之旅</h3><p>这大概是走过的最纯粹也是最孤独的一段旅程，一个人，一辆车，1000公里，只有自己和自然的对话。其间拍摄的照片到现在还没有整理完全，导致游记的编写一搁再搁，趁着记忆还没有完全褪色，先挑选四个时刻短暂的回顾一下。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/24-09-23%20%E8%B5%A4%E5%B3%B0%E5%B8%82-99%E5%8F%B7%E5%85%AC%E8%B7%AF%2064.jpg" alt="24-09-23 赤峰市-99号公路 64.jpg|500"></p><pre><code>📅 2024.09📍 内蒙古锡林郭勒盟成吉思汗瞭望山📷 NIKON Z6 | 270mm</code></pre><p>这是自驾的第二天，按照原本的计划应该是要走达达线，但是当时临时起意想多走一些路程，便选择继续北上走了99号公路。而成吉思汗瞭望山是99号公路行程中最西的部分。瞭望山徒步往返大约一个小时。如果说路上所见的草原是蓝天草地的简约，那从高处所见的草原便多了空间的层次。草原的起伏、飞速飘过的云彩，山顶的风景不再是静态的一个个敖包，而是不断变化、永不停歇的时空。这种感受是很奇妙的，大地从微观的动态到局部的静态，再到宏观的动态，或许可以视为一种四维时空的具象化。相比起无人机，或许还是真实的站在山顶上，让自己的感官被草原与呼啸的风包裹，才会有更深的感受吧。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/24-09-23%20%E8%B5%A4%E5%B3%B0%E5%B8%82-99%E5%8F%B7%E5%85%AC%E8%B7%AF%2021.jpg" alt="24-09-23 赤峰市-99号公路 21.jpg|500"></p><pre><code>📅 2024.09📍 内蒙古锡林郭勒盟遥鲁海日罕山📷 NIKON Z6 | 100mm 接片</code></pre><p>严格来说这并不是此行预计的目的地，原本是打算途径遥鲁海日罕山然后一路向南返程在日落前到达巴林右旗，但是就在遥鲁海日罕山的另一侧看到了最难忘的一幕——黄昏前的草原、小丘、吃草的羊群与马儿，以及一幢小房子。这种感受如果形容的话，大抵是以往对于草原最纯粹的幻想，再掺杂上静谧温暖的 feelings，在最好的光线和时辰展现在眼前。</p><p>有时候会思考一个问题，照片仅仅是图像吗？或许所有的风光照片中可以抽象出理论上最好那一张，最好的色彩、最好的景色、最好的光线，而且在肉眼可见的将来对于AI来说，想要创造出让大部分人喜欢的照片并不是什么难事。但其中始终缺少了情感与感受。正如博物馆中的许多藏品抛去其所蕴含的历史与人文便只是破损的瓶瓶罐罐一般，一张照片在按下快门的那一时刻如果不能感动摄影者本身，那其中所传达的始终是干瘪的图像或是虚假的情感，就像是无糖可乐一般只能带来一时的甜腻，而没有了之后的回甘。</p><blockquote><p>Sometimes I don’t. If I like a moment… I mean, me, personally… I don’t like to have the distraction of the camera. Just want to stay in it.</p></blockquote><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/24-09-23%20%E8%B5%A4%E5%B3%B0%E5%B8%82-99%E5%8F%B7%E5%85%AC%E8%B7%AF%2049.jpg" alt="24-09-23 赤峰市-99号公路 49.jpg|500"></p><pre><code>📅 2024.09📍 内蒙古锡林郭勒盟西乌珠穆沁旗📷 NIKON Z6 | 39mm</code></pre><p>恋恋不舍的离开遥鲁海日罕山后，开车走上了一条只有单车道、没有网络的返程线路——而后的事实证明我错了，这条路线中间被截断，导致之后不得不连夜赶路返程。但在此之前这条因为意外踏上的旅途却有着一小段独特的时光。因为没有网络，而短暂的“脱离了”社会，目之所及只有草原、白桦树、夕阳和牛羊，从黄昏一直行至蓝调时刻。脑海中不断循环的是的梁博「日落大道」：</p><blockquote><p>我们寻找着在这条路的中间<br>我们迷失着在这条路的两端<br>每当黄昏阳光把所有都渲染<br>你看那金黄多耀眼</p></blockquote><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/24-09-24%20%E8%B5%A4%E5%B3%B0%E5%B8%82%2015.jpg" alt="24-09-24 赤峰市 15.jpg|500"></p><pre><code>📅 2024.09📍 内蒙古赤峰市巴林右旗📷 NIKON Z6 | 27mm</code></pre><p>在巴林右旗的晚上辗转反侧，直到天蒙蒙亮依然没有入睡，干脆一不做二不休起床驱车去附近的湖边看日出，却恰巧碰上了那几天中最好的一场日出朝霞。偌大的湖岸边只有我和一个老哥，两人也没有交流，默默的架好相机，然后回到车中看完了整场的朝霞，然后各自收拾，奔赴各自的下一个目的地。其间的交集只是这一场日出。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/EB55A02F-D6A8-4EF2-B30A-0911FDB3C50F_1_105_c.jpeg" alt="EB55A02F-D6A8-4EF2-B30A-0911FDB3C50F_1_105_c.jpeg|500"></p><pre><code>📅 2024.10📍 福建省宁德市霞浦县📷 iPhone 13 | 13mm</code></pre><p>霞浦的这一处景区尚未开发，需要按着潮汐时刻小心地顺着海岸边的礁石攀爬抵达。拍了这么多年的照片却少有给自己拍的内容，也算是一个小小的开端吧。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/24-11-03%20%E6%B3%B0%E5%B1%B1%2057.jpg" alt="24-11-03 泰山 57.jpg|500"></p><pre><code>📅 2024.11📍 山东省泰安市泰山📷 NIKON Z6 | 26mm</code></pre><blockquote><p>日照香炉生紫烟</p></blockquote><p>夜爬泰山，观日出云海，享淄博烧烤，而无憾已</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/3ADFBAF7-7DAB-4115-A7A5-FE1E102CA9AE_1_201_a.jpeg" alt="3ADFBAF7-7DAB-4115-A7A5-FE1E102CA9AE_1_201_a.jpeg|500"></p><pre><code>📅 2024.12📍 北京市延庆区📷 iPhone 16pro | 24mm</code></pre><p>严谨的来说不算是我拍摄的照片，不过依然想作为Best 10的最后一张，纪念一下这几年一起欢笑一起熬夜改bug的日子。</p><blockquote><p>Pity that the “BEST TEAM HONOR” of some college failed to prove its worth 🤗</p></blockquote><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>今年拍摄的照片相比往年少了许多，但另一方面对于摄影本身也有了一些新的感悟。如果说以往的照片有着潜意识中“要拍出精妙的大片”与“挥洒创意与想法”，现在的想法开始慢慢转向记录生活中感动自己一瞬。记录感动自己的一瞬，并将这种感受尽可能的传递给读者。</p><blockquote><p>Hope I can be a bridge between you and nature.  —— Linksphotograph</p></blockquote><p>今年的技术上，「Spatial Photos &amp; Video」走在了相似的道路上，记录时空中的那一瞬，再调动各种感官去感受与回味。但在此之前，让我们先回到我们的生活中，试着记录那些打动我们的一瞬吧。</p><blockquote><p>📷 <a href="https://photo.zlxmchen.top/">zlxmchen’s photo lab</a><br>📕 <a href="https://500px.com.cn/epicureanism">zlxmchen’s 500px</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Journal </tag>
            
            <tag> Best10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obsidian同步方案win&amp;iOS</title>
      <link href="/2023/09/5bf3cea6cb4f.html"/>
      <url>/2023/09/5bf3cea6cb4f.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_write_2.png" alt="cover"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>obsidian 在我的日常使用中主要承担着两个功能：日常笔记与博客维护。本身只有博客通过 git 进行同步操作。但是最近又有了在 iPad 端进行笔记查看的需求。obsidian 本身提供了多端同步的功能，但是价格上实在难以承受——特别是我只是需要偶尔在 iPad 上查看一下笔记而已，于是便趁此机会研究一下 obsidian 的同步方案。</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><table><thead><tr><th>日期</th><th>主要内容</th></tr></thead><tbody><tr><td>2025.01.25</td><td>更新git参考链接（感谢<a href="https://github.com/mattshma">mattshma</a>的评论）</td></tr></tbody></table><h1 id="方案比较"><a href="#方案比较" class="headerlink" title="方案比较"></a>方案比较</h1><p>主流的 obsidian 第三方同步方案如下：</p><table><thead><tr><th>方案</th><th>参考教程</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>坚果云 webdev&amp;remotely Save</td><td><a href="https://zhuanlan.zhihu.com/p/594955199">https://zhuanlan.zhihu.com/p/594955199</a></td><td>简单使用无需付费，同步速度较快</td><td>第一次同步大概率触发流量限制，需要 6 个小时后才可再次同步（且可能再次触发）；无可靠版本控制，且有同步出错的报道，需要自行备份（伤不起呀）</td></tr><tr><td>icloud</td><td><a href="https://sspai.com/post/68596">https://sspai.com/post/68596</a></td><td>官方同步服务，icloud 在 iOS 平台一次同步多端使用</td><td>同步不稳定；可能出现重复副本（可能解决方案<a href="https://zhuanlan.zhihu.com/p/459147364">FreeFileSync 中转</a> ） ；win 版本的 iCloud 易用程度&gt;&gt;0</td></tr><tr><td>git</td><td><a href="https://qileq.com/204/">https://qileq.com/204/</a></td><td>github 私有仓库同步稳定可靠，不担心出错且有历史版本</td><td>需要手动同步，自动同步容易出现冲突</td></tr></tbody></table><p>介于我暂时只需要在 iPad 端查看笔记，且没有很高的多端同步时效性的要求，且对 git 的安全性比较放心（而且完全免费！），故采取 git 来完成同步的工作</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="win"><a href="#win" class="headerlink" title="win"></a>win</h2><ul><li><a href="https://www.zlxmblog.com/2023/07/06a07d3ab9d6.html#git">git 与 github 基本配置</a></li><li>obsidian 下载插件obsidian git、 Commander  （推荐安装，非必须）</li><li>必备的网络工具（you know who~）</li></ul><h2 id="iPad-x2F-mac-x2F-iPhone"><a href="#iPad-x2F-mac-x2F-iPhone" class="headerlink" title="iPad&#x2F;mac&#x2F;iPhone"></a>iPad&#x2F;mac&#x2F;iPhone</h2><ul><li>obsidian</li><li>Working Copy（负责 git 同步）</li></ul><ul><li>必备的网络工具（you know who~）</li></ul><p>完成以上准备工作后就可以开始了（注意替换<code>[]</code>中的内容）</p><h1 id="Obsidian-win-gt-Github"><a href="#Obsidian-win-gt-Github" class="headerlink" title="Obsidian(win)-&gt;Github"></a>Obsidian(win)-&gt;Github</h1><ul><li>在 github 中创建私有仓库，获取<code>https://github.com/[yourName]/[yourRepo].git</code></li><li>在 obsidian 本地仓库路径下 git bash，完成仓库配置</li></ul><pre><code>git initgit add *git commit -m &quot;[repo] init&quot;git remote add origin https://github.com/[yourName]/[yourRepo].gitgit push -u origin master</code></pre><p>返回 Github，检查仓库是否被成功上传，以及是否有文件未成功上传，检查无误后即可进入下一阶段。</p><blockquote><p>在上传时，.obsidian 文件夹可能未被成功上传，此时需要手动 git add&amp;commit&amp;push 上传，在完成第一次上传后添加.gitignore 文件，添加.obsidian 的忽略</p></blockquote><h1 id="Github-gt-Obsidian-iPad"><a href="#Github-gt-Obsidian-iPad" class="headerlink" title="Github-&gt;Obsidian(iPad)"></a>Github-&gt;Obsidian(iPad)</h1><p>此部分主要参考<a href="https://qileq.com/tool/obsidian/how-to/sync-by-git/">git&amp;obsidian</a>，以 iPad 为例（其他端同理）</p><p>iPad 端同步的流程如下：</p><ul><li>Obsidian 创建同名空仓库</li><li>Working Copy 将该仓库连接到 Github 仓库并拉取内容</li><li>返回 Obsidian 重新加载内容</li></ul><h2 id="Obsidian-iPad"><a href="#Obsidian-iPad" class="headerlink" title="Obsidian(iPad)"></a>Obsidian(iPad)</h2><ul><li>进入软件，点击<code>Create new vault</code>创建同名仓库，此时可在<code>文件-我的iPad-obsidian</code>目录下看到同名文件夹。</li><li>如果 iPad 安装有 ES 文件浏览器或其他工具，将文件夹下的<code>.obsidian</code>文件夹删除，也可在同步环节在 Working Copy 中删除<code>.obsidian</code>文件夹。</li></ul><h2 id="Working-Copy-配置"><a href="#Working-Copy-配置" class="headerlink" title="Working Copy 配置"></a>Working Copy 配置</h2><ul><li>点击<code>左上角设置按钮-SSH Keys-WorkingCopy@xxxx</code>进入 RSA Key 设置，点击 <code>Connect With GitHub</code>完成 github 的授权。</li></ul><h2 id="Working-Copy-同步远程仓库"><a href="#Working-Copy-同步远程仓库" class="headerlink" title="Working Copy 同步远程仓库"></a>Working Copy 同步远程仓库</h2><ul><li><p>回到 Working Copy 主界面，<code>+ - Link external directory</code>(可免费试用)，选择<code>文件-我的iPad-obsidian</code>目录下选择目标仓库，打开。</p></li><li><p><code>Repository - Configuration - Add Remote - URL</code>填写仓库地址<code>https://github.com/[yourName]/[yourRepo].git</code>，点击<code>Test</code>后出现<code>Configuration passed test</code>则说明配置无误。</p><blockquote><p>请自行解决网络问题~直到出现<code>Configuration passed test</code>为止</p></blockquote></li><li><p>完成配置后，点击右下角指纹按钮进入仓库</p><blockquote><p>若之前未删除<code>.obsidian</code>文件夹，则此时 Delete</p></blockquote></li><li><p>点击<code>Pull</code>按钮，等待仓库数据的拉取（速度可能比较慢，只要 test 环节没问题那只是时间问题）</p></li><li><p>此时重启Obsidian(iPad)即可正常打开仓库~</p></li></ul><h1 id="后续同步"><a href="#后续同步" class="headerlink" title="后续同步"></a>后续同步</h1><h2 id="win-gt-iPad"><a href="#win-gt-iPad" class="headerlink" title="win-&gt;iPad"></a>win-&gt;iPad</h2><ul><li>插件Obsidian git可以在Obsidian内完成git同步的操作，安装后会自动识别仓库的git信息，执行<code>git commit all changes</code>和<code>git push</code>即可。Obsidian git也可以完成自动化操作，但是具体如何配置就看自己需要了。</li><li>但是执行两遍命令还是太麻烦了，此时我们可以通过Commander来实现自动化同步：<code>Commander - Macros</code>可以创建自动化流程，创建一个新的自动化流程，依次执行commit和push操作即可，中间可适当delay，创建后，在Commander中将自动化操作添加到面板，就可以很方便的完成同步操作了。</li></ul><h2 id="iPad-gt-win"><a href="#iPad-gt-win" class="headerlink" title="iPad-&gt;win"></a>iPad-&gt;win</h2><p>由于目前暂时没有较多的同步需求，此处未作深入探究，如果需要手动同步，可在Working Copy中手动commit&amp;push即可，操作与git无异。</p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p><strong>网络问题无法解决？</strong><br>建议采用坚果云webdev方案，或者咱去找找办法解决一下网络问题？</p><p><strong>自动同步？</strong><br>目前插件Obsidian git可以实现win-&gt;Github的自动同步，但是其他部分暂时只能手动完成，如果你有解决的方法，欢迎评论区交流。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://qileq.com/204/">https://qileq.com/204/</a><br><a href="https://sspai.com/post/68596">https://sspai.com/post/68596</a><br><a href="https://zhuanlan.zhihu.com/p/594955199">https://zhuanlan.zhihu.com/p/594955199</a></p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点<a href="https://github.com/ZlxmChen/zlxmblog.github.io">仓库</a>的 star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Obsidian指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数码哲思录——挑选手机的时候，我们在考虑什么？</title>
      <link href="/2023/07/56495e8675bf.html"/>
      <url>/2023/07/56495e8675bf.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_write.png" alt="cover"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>晚上出门闲逛的时候去看了看新发布的 HONER Magic V2 折叠屏系列，虽然大概有些预期，但实际上手依然令人咋舌的轻薄。当直板机的重量逐渐与折叠屏相当，且价格上的差距也是越来越少，那么，折叠屏会取代直板机（旗舰）成为新的选择吗？</p><h1 id="思考与准则"><a href="#思考与准则" class="headerlink" title="思考与准则"></a>思考与准则</h1><h2 id="换位思考"><a href="#换位思考" class="headerlink" title="换位思考"></a>换位思考</h2><p>要解答这个问题，不如先回过头思考一下另一个问题：不考虑价格的前提下，你会选择同系列手机中的标准机型还是旗舰机型呢？有人可能会说，啊这不是显然的吗？要是不考虑价格肯定买旗舰呀，配置拉满能有啥缺点呀。那进一步思考另一个问题：不限成本，从硬件角度你会选择如何设计一款手机呢？随便举个例子：</p><ul><li>最新款芯片搭配 24G + 1T ？<del>虽然好像已经有厂商这么干了</del></li><li>4KHDR 高亮屏锁死 120HZ？</li><li>6000mAh 大容量电池搭配 120W 闪充与 60W 无线充？</li><li>三摄乃至四摄一英寸覆盖 13-260 焦段？（基于 26mm 为 1x 下，0.5x - 10x 变焦）</li></ul><p>听上去很不错对吧，但此时我们考虑一下以上设计会带来哪些“副作用”：</p><ul><li>24 + 1T 对于手机而言可谓游刃有余，但内存和硬盘再便宜也意味着额外的成本。</li><li>高分辨率 + 高刷新率 &#x3D; 高耗能， 联系电池环节意味着在保持相同使用时间的条件下，更短的使用时间或者更大的电池容量需求（重量），当然，额外的成本。</li><li>电池除了重量，不可忽视的还有高功率带来的充电器体积与重量的倍增。</li><li>更多镜头、更大底物理意义上意味着相同技术力下，更厚的手机或突出，与重量以及成本的明显增加。</li></ul><blockquote><p>以上讨论的前提在于，当你作为厂商，在相同技术力下，更“差”的规格通常意味着更轻薄、成本更低。</p></blockquote><p>从中不难发现，从厂商的角度看待手机硬件的时候，要重要的工作便是平衡 —— 平衡成本、重量、体积与各项规格。但在手机推到台前之时，厂商花费大量的篇幅介绍各项规格（这一点各大厂商无一例外），而对平衡中被牺牲的部分避之不谈，当然这样做无可厚非，但让我们回到消费者的角度，我们对手机的选择应当基于厂商的宣发、介绍吗？这显然是否定的。消费者有自己的考量与需求，价格多少，对系统的偏爱，对功能的取舍，换而言之——当我们在挑选手机的时候，我们需要做的工作与厂商相同 —— 平衡。</p><h2 id="做好平衡"><a href="#做好平衡" class="headerlink" title="做好平衡"></a>做好平衡</h2><p>平衡不同于简单的规格取舍，如追求极致的重量而舍弃各种功能，或是追求极致的性能而舍弃外观、轻薄等等。但与厂商的不平衡三角不同，消费者所做的平衡是基于各项需求与预期间的平衡，换而言之，对于各项需求确定一个基准（比如当前手中的设备），再确定变化带来的感知（也就是权重），而每个人的需求都各不相同，这也就意味着——平衡的基础是回归自身需求。</p><h2 id="回归自身需求"><a href="#回归自身需求" class="headerlink" title="回归自身需求"></a>回归自身需求</h2><p>什么是自身需求？如果被各类的营销迷晕了眼，不如回头看一眼手头的设备，他多半满足了多数你的需求，将其作为多数的基准通常能保证体验的下线，将使用过程中感知的优点作为高权重项目通常意味着优秀使用体验的延续。而日常感知（而非宣传测评）中的痛点也应当给予高权重——毕竟你已经被困扰很久了，使用一部延续了缺点的手机难免让人糟心，通常你最早想到的点意味着较大的影响，通常也意味着更高的权重。</p><h2 id="如何对待新功能"><a href="#如何对待新功能" class="headerlink" title="如何对待新功能"></a>如何对待新功能</h2><p>在确定了以上俩点后，才来到了厂商们摇旗呐喊的主阵地——新功能与使用体验的升级。毫无疑问，新功能与使用体验的升级多半不会直接带来差的使用体验，但在完成对自身需求的考量后，消费者应当认识到：<strong>新功能与使用体验的升级，特别是硬件层面的规格提升，可能意味着自身需求层面的负面影响</strong>，哪怕新的硬件规格不影响重量、尺寸等等，在相同技术力下，其至少影响了成本。当然，软件层面的更新升级不太容易成为一件坏事，你作为消费者需要警惕的是：其一，<strong>多数超出自身原本需求之外的提升其边际效益递减</strong>，比如目前可预见的数年内，对于多数人的使用场景而言，16G 内存相比 24G 乃至更高规格的内存对使用体验的提升微乎其微；原本使用空间不足 256G 更换 1T 存储空间后，大半的空间到机器的生命尽头也不会被利用到，只是徒增成本；其二，基于厂商的宣发，人们会不自觉地美化功能体验上的提升，而在潜意识中<strong>降低了自身需求的权重</strong>。因此对于新功能与使用体验的升级，其平衡是双向的——一方面回归线下的实际体验，上手才是检验真理的唯一标准；另一方面，严守自身需求的底线，对高权重自身需求的负面效果会在购买新手机后的一段时间内显现，并长久的困扰着你使用他的每分每秒。</p><h1 id="挑选准则"><a href="#挑选准则" class="headerlink" title="挑选准则"></a>挑选准则</h1><p>所以总结而言，挑选手机的顺序应当<strong>回归自身，做好平衡</strong>，可以试着问自己三个问题：</p><ul><li>Look Back —— 有哪些是已经必须的？</li><li>Look Around —— 有哪些是感知需要的？</li><li>Look Forward —— 有哪些新功能感兴趣？加上这些新功能后，我的个人需求是否收到了较大的影响？</li></ul><h2 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h2><p>以我个人的购买经历作为参考，当然以下都是基于我个人的需求，千人千面经供参考</p><p>从华为 P40 标准 - iPhone 13 128</p><p>Look Back：</p><ul><li>手机轻薄的优先级高，最轻的标准版 P40 带壳还是有点沉。</li><li>6.3（还是 6.1？）的屏幕尺寸感官舒适。</li><li>33W（印象里）的充电速度可以接受，60HZ 的屏幕可以接受。</li><li>256G 存储除去照片后不足 128G，空间富余。</li><li>3 摄方便。</li><li>暂时而言基本很少打电话，对信号和 5G 的要求不高。</li><li>截屏、双开等功能很方便。</li></ul><p>Look Around：</p><ul><li>系统层面不满意，无处不在的广告极度不满。</li><li>摄像取景框与成像差距大，且偏色较为严重，成像所需时间较长。</li><li>各类动画与 UI 设计不舒适，相比较而言更偏好苹果动画与设计（大概是用习惯了）。</li><li>小电池带来的续航短缺。</li></ul><p>Look Forward：</p><ul><li>App Store 多区账号下“便捷”的使用体验。<br>由于印象不是很深，所以其他部分空缺，但应该是在平衡后放弃了。</li></ul><p>而选择 iPhone 13 128 的原因大致如下：</p><ul><li><p>难得的轻薄标准版机型（mini 系列相当喜欢，但是对于日常使用还是小了点，但再选一遍的话真不好说，以后没准收一个当日常用机）</p></li><li><p>苹果系统的动画、交互、UI 设计深得我心，简洁、高效、符合直觉，没有乱七八糟的系统广告，配置后可消除所有开屏广告。</p><blockquote><p>最最重要的，作为一名左撇子，iPhone 的返回逻辑对我而言不构成任何的阻碍，反而如鱼得水一般符合交互逻辑。</p></blockquote></li><li><p>极小的电池容量却保持了优异的续航成绩，换算一下的话充电速度和原来的 33W 差不太多。</p></li><li><p>摄像取景框与成像差距小，成像所需时间短（近一年安卓阵营赶上来了，但当时还是差一些），偏色有优化（但不多）</p></li><li><p>60HZ 屏幕与 6.1 寸实际上手后没有不适，120HZ 更丝滑但 60HZ 也能接受。</p></li><li><p>开通 iCloud 服务后，节省内存空间，结合原先的存储情况直接选 128 版本了。</p></li></ul><p>选择过程中被平衡掉的功能：</p><ul><li>三摄，尤其是 50mm 上下焦段的缺失大概是最不满意的，但当时三摄方案基本重量都在 190g 以上，线下感觉还是太重了。</li><li>截屏、双开等快捷功能，有相应的解决方案且可接受。</li></ul><p>在经过了一年的使用后，整个换机的体验基本符合预期。日常仅贴膜裸奔手感舒适，续航给力且屏幕素质优秀，系统在交互、UI 设计等等方面都带来了舒适的使用体验。如果需要再换一次手机的话，需要改动的环节大致如下：</p><ul><li>系统交互、动画与 UI 设计的优先级进一步提高。</li><li>继续保持对 50mm 焦段上下的需求，目前看来在保证其他体验的前提下下放目前 iPhone Pro 机型的裁切 2x 是一个最平衡的选择，实际体验可以接受。同时期待以下能有 185g 上下的其他厂商的方案。</li><li>更加优质的摄影质量，对于 iPhone 目前的锐化和 HDR 策略实在不太满意，相比较之下其他主流厂商的成像可谓是大幅度领先。</li></ul><p>从这些角度来看，目前我所关注的主要变化包含以下几种：</p><ul><li>iPhone 系列： Pro 机型的裁切 2x 提供 50mm 焦段，优化标准机型的锐化和 HDR 策略。不切实际一些的话，Pro 机型重量减轻到 185g 上下，但结合以上分析可知，Pro 机型提升的多数部分个人感知并不强烈。</li><li>HUAWEI 系列： 控制重量和体积的机型，对偏色的控制有待提高。算法提供长焦距是个很欣赏的策略，但目前来看效果还有不少提升的空间。另外删一删系统广告吧，真的蚌埠住。</li><li>vivo&amp;oppo： 控制重量和体积的机型，很欣赏这两家对于色调的把控，但是硬件堆料太猛了，动辄 220g+难以承受。</li></ul><p>当然，以上都是基于我个人的偏好与需求，具体到每个人因人而异，没有一部手机能够完美满足每个人的需求，我们所需要做的便是回归自身，做好平衡。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>本文主要辨析的点还是在于回归自身需求与做好平衡的思想层面，但落到实处的执行无疑是艰难的——权重如何配比，新功能如何取舍，何时做出让步，工作量巨大且因人而异。且对于数码爱好者而言，获取手机的各项参数并不是一件难事，且对参数有着基本的认知——比如一台 64G 的手机在今天显然不能冠上“超大容量”的幌子。但对于多数普通消费者而言，他们需要一套行之有效、简单便捷的系统来辅助挑选，帮助做好平衡。如果你对这个项目感兴趣，欢迎留言你的 idea，或是参与进来一起设计！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点<a href="https://github.com/ZlxmChen/zlxmblog.github.io">仓库</a>的 star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 我思故我在 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我思故我在 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 选择器</title>
      <link href="/2023/07/262dd3560c6b.html"/>
      <url>/2023/07/262dd3560c6b.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_think.png" alt="cover"></p><h1 id="选择器的类型"><a href="#选择器的类型" class="headerlink" title="选择器的类型"></a>选择器的类型</h1><p>主要包含类选择器、类型选择器、ID 选择器，在此基础上可以增加标签属性选择器、伪类和伪元素</p><h2 id="类型、类、ID-选择器"><a href="#类型、类、ID-选择器" class="headerlink" title="类型、类、ID 选择器"></a>类型、类、ID 选择器</h2><p>类型选择器作用于同类型的元素</p><pre><code class="css">span &#123;    background-color: yellow;&#125;</code></pre><p>类选择器作用域指定了 class 的元素</p><pre><code class="css">.highlight &#123;    background-color: yellow;&#125;&lt;p class=&quot;highlight&quot;&gt;</code></pre><p>可以通过指定类型来指定特定元素的类</p><pre><code class="css">span.highlight &#123;    background-color: yellow;&#125;</code></pre><p>也可以通过对一个元素应用多个类</p><pre><code class="css">.notebox &#123;  border: 4px solid #666;  padding: .5em;&#125;.notebox.warning &#123;  border-color: orange;  font-weight: bold;&#125;.notebox.danger &#123;  border-color: red;  font-weight: bold;&#125;</code></pre><pre><code class="html">&lt;div class=&quot;notebox warning&quot;&gt;    This note shows a warning.&lt;/div&gt;&lt;div class=&quot;notebox danger&quot;&gt;    This note shows danger!&lt;/div&gt;&lt;div class=&quot;danger&quot;&gt;    This won&#39;t get styled — it also needs to have the notebox class&lt;/div&gt;</code></pre><p>你也可以通过指定 ID 来选择元素, 同一个页面中 ID 不允许重复</p><pre><code class="css">#one &#123;    background-color: yellow;&#125;h1#heading &#123;    color: rebeccapurple;&#125;&lt;h1 id=&quot;heading&quot;&gt;ID selector&lt;/h1&gt;</code></pre><blockquote><p>通常而言, ID 选择器只有在需要指定特定一个元素的时候使用, 其他时候更推荐使用其他方式;</p></blockquote><blockquote><p>类选择器更多用于全局样式的修改, 和类内元素的样式设置, 如果希望对一些基础样式作出修改, 那么请在 CSS 开头完成; 类内元素使用.class type{}来完成</p></blockquote><blockquote><p>类选择器是最为常用</p></blockquote><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><pre><code class="css"># 后代选择器作用于所有的子代和子代的子代p strong &#123;    color: red;&#125;# 子代选择器只作用于一级子代.one p&#123;    color: red;&#125;</code></pre><p>并集选择器, 将属性作用于多个元素上</p><pre><code class="css">p, #one, .two &#123;    color: red;    &#125;</code></pre><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><p>常用的伪类:</p><h3 id="链接-a"><a href="#链接-a" class="headerlink" title="链接 a"></a>链接 a</h3><ol><li><code>:link</code>  应用于未被访问过的链接。</li><li><code>:hover</code>  应用于有鼠标指针悬停于其上的元素。</li><li><code>:active</code>  应用于被激活的元素，如被点击的链接、被按下的按钮等。</li><li><code>:visited</code>  应用于已经被访问过的链接。</li></ol><p>其他常用的伪类:</p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-child"><code>:first-child</code></a></td><td>匹配兄弟元素中的第一个元素。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a></td><td>当用户悬浮到一个元素之上的时候匹配。</td></tr></tbody></table><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>其中<code>first-letter</code>和<code>first-line</code>较为常用, selection 可以用于定制选中文本时的效果</p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after"><code>::after</code></a></td><td>匹配出现在原有元素的实际内容之后的一个可样式化元素。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before"><code>::before</code></a></td><td>匹配出现在原有元素的实际内容之前的一个可样式化元素。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter"><code>::first-letter</code></a></td><td>匹配元素的第一个字母。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line"><code>::first-line</code></a></td><td>匹配包含此伪元素的元素的第一行。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection"><code>::selection</code></a></td><td>匹配文档中被选择的那部分。</td></tr></tbody></table><h1 id="CSS-层叠优先级"><a href="#CSS-层叠优先级" class="headerlink" title="CSS 层叠优先级"></a>CSS 层叠优先级</h1><p>这里只做了一个简单的优先级考量, 更具体的请参考 MDN</p><p>important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承 &gt; 通配符</p><ul><li><strong>ID</strong>：选择器中包含 ID 选择器则百位得一分。</li><li><strong>类</strong>：选择器中包含类选择器、属性选择器或者伪类则十位得一分。</li><li><strong>元素</strong>：选择器中包含元素、伪元素选择器则个位得一分。</li></ul><p>在真实比对优先级时, 从 ID 开始比较, 若到元素环节依然相同, 则后出现的生效<br>!important 优先级最高, 内联样式其次, 然后才到 ID&#x2F;类&#x2F;元素的考量, 下面是一个示例</p><pre><code class="css">/* 1. specificity: 1-0-1 */#outer a &#123;    background-color: red;&#125;/* 2. specificity: 2-0-1 , this one win!*/#outer #inner a &#123;    background-color: blue;&#125;/* 3. specificity: 1-0-4 */#outer div ul li a &#123;    color: yellow;&#125;/* 4. specificity: 1-1-3 this one win!*/#outer div ul .nav a &#123;    color: white;&#125;/* 5. specificity: 0-2-4 */div div li:nth-child(2) a:hover &#123;    border: 10px solid black;&#125;/* 6. specificity: 0-2-3 */div li:nth-child(2) a:hover &#123;    border: 10px dashed black;&#125;/* 7. specificity: 0-3-3  this one win!*/div div .nav:nth-child(2) a:hover &#123;    border: 10px double black;&#125;</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">盒模型 - 学习 Web 开发 | MDN (mozilla.org)</a></p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点仓库的 star<del>感激不尽</del></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> frontEnd </tag>
            
            <tag> updating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html指南</title>
      <link href="/2023/07/87c6c4a6fe39.html"/>
      <url>/2023/07/87c6c4a6fe39.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_think_2.png" alt="cover"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>随着前端学习的深入，逐渐发现自己的前端基础还不是特别的扎实，记录一下 html 的相关知识，免得每次都得上网查找。总体而言，这算不上新手指南，更好的是作为 html 使用的参考资料。</p><h1 id="html-框架知识"><a href="#html-框架知识" class="headerlink" title="html 框架知识"></a>html 框架知识</h1><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;my-css-file.css&quot; /&gt;    &lt;script src=&quot;my-js-file.js&quot; defer&gt;&lt;/script&gt;    &lt;title&gt;标题&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;p&gt;页面&lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>页面在浏览器加载后它的内容不会在浏览器中显示，它的作用是保存页面的一些<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Metadata">元数据</a>。</p><pre><code class="html">&lt;title&gt;用于显示网页的标题, 与正文中的标题区分&lt;/title&gt;</code></pre><p>指定文档的字符编码</p><pre><code class="html">&lt;meta charset=&quot;utf-8&quot; /&gt;</code></pre><p>提供作者与简述, 可显示在搜索引擎结果中</p><pre><code class="html">&lt;meta name=&quot;author&quot; content=&quot;Chris Mills&quot; /&gt;&lt;meta  name=&quot;description&quot;  content=&quot;The MDN Web Docs Learning Area aims to providecomplete beginners to the Web with all they need to know to getstarted with developing web sites and applications.&quot; /&gt;</code></pre><p>图标, 可以直接在网页根目录下放 favicon.ico 文件, 也可以在 head 引入(可以使用其他类型图片)</p><pre><code class="html">&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;&lt;link  rel=&quot;icon&quot;  href=&quot;https://developer.mozilla.org/static/img/favicon32.png&quot; /&gt;</code></pre><p>使用 css 与 js:</p><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;my-css-file.css&quot; /&gt;&lt;script src=&quot;my-js-file.js&quot; defer&gt;&lt;/script&gt;</code></pre><h2 id="html-布局元素"><a href="#html-布局元素" class="headerlink" title="html 布局元素"></a>html 布局元素</h2><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;二次元俱乐部&lt;/title&gt;    &lt;link href=&quot;https://fonts.googleapis.com/css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;header&gt; &lt;!-- 本站所有网页的统一主标题 --&gt;      &lt;h1&gt;聆听电子天籁之音&lt;/h1&gt;    &lt;/header&gt;    &lt;nav&gt; &lt;!-- 本站统一的导航栏 --&gt;      &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;主页&lt;/a&gt;&lt;/li&gt;        &lt;!-- 共 n 个导航栏项目，省略…… --&gt;      &lt;/ul&gt;      &lt;form&gt; &lt;!-- 搜索栏是站点内导航的一个非线性的方式。 --&gt;        &lt;input type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;要搜索的内容&quot;&gt;        &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;&gt;      &lt;/form&gt;    &lt;/nav&gt;    &lt;main&gt; &lt;!-- 网页主体内容 --&gt;      &lt;article&gt;        &lt;!-- 此处包含一个 article（一篇文章），内容略…… --&gt;      &lt;/article&gt;      &lt;aside&gt; &lt;!-- 侧边栏在主内容右侧 --&gt;        &lt;h2&gt;相关链接&lt;/h2&gt;        &lt;ul&gt;          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt;          &lt;!-- 侧边栏有 n 个超链接，略略略…… --&gt;        &lt;/ul&gt;      &lt;/aside&gt;    &lt;/main&gt;    &lt;footer&gt; &lt;!-- 本站所有网页的统一页脚 --&gt;      &lt;p&gt;© 2050 某某保留所有权利&lt;/p&gt;    &lt;/footer&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main"><code>&lt;main&gt;</code></a>  存放每个页面独有的内容。每个页面上只能用一次  <code>&lt;main&gt;</code>，且直接位于  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body"><code>&lt;body&gt;</code></a>  中。最好不要把它嵌套进其他元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article"><code>&lt;article&gt;</code></a>  包围的内容即一篇文章，与页面其他部分无关（比如一篇博文）。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section"><code>&lt;section&gt;</code></a>  与  <code>&lt;article&gt;</code>  类似，但  <code>&lt;section&gt;</code>  更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以  <a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Howto/Set_up_a_proper_title_hierarchy">标题</a>  作为开头；也可以把一篇  <code>&lt;article&gt;</code>  分成若干部分并分别置于不同的  <code>&lt;section&gt;</code>  中，也可以把一个区段  <code>&lt;section&gt;</code>  分成若干部分并分别置于不同的  <code>&lt;article&gt;</code>  中，取决于上下文。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside"><code>&lt;aside&gt;</code></a>  包含一些间接信息（术语条目、作者简介、相关链接，等等）。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header"><code>&lt;header&gt;</code></a>  是简介形式的内容。如果它是  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body"><code>&lt;body&gt;</code></a>  的子元素，那么就是网站的全局页眉。如果它是  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article"><code>&lt;article&gt;</code></a>  或<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section"><code>&lt;section&gt;</code></a>  的子元素，那么它是这些部分特有的页眉（此  <code>&lt;header&gt;</code>  非彼  <a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#%e5%a2%9e%e5%8a%a0%e4%b8%80%e4%b8%aa%e6%a0%87%e9%a2%98">标题</a>）。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav"><code>&lt;nav&gt;</code></a>  包含页面主导航功能。其中不应包含二级链接等内容。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer"><code>&lt;footer&gt;</code></a>  包含了页面的页脚部分。</li></ul><h2 id="块级元素和内联元素-block-and-inline-block"><a href="#块级元素和内联元素-block-and-inline-block" class="headerlink" title="块级元素和内联元素 block and inline block"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%92%8C%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0">块级元素和内联元素 block and inline block</a></h2><p>块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。</p><p>常用的块级元素有:</p><pre><code class="html">&lt;div&gt;        定义文档中的分区或节&lt;p&gt;        定义段落&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;        标题元素&lt;dl&gt;        定义列表&lt;dt&gt;        定义列表中的项目&lt;form&gt;        创建表单元素&lt;hr&gt;        水平线&lt;li&gt;        定义列表项目&lt;ol&gt;        有序列表&lt;ul&gt;        无序列表&lt;table&gt;        定义表格&lt;td&gt;        表格中的标准单元格&lt;tr&gt;        表格中的行&lt;tfoot&gt;        表格中的页脚&lt;th&gt;        定义表头单元格&lt;thead&gt;        定义表格的表头</code></pre><blockquote><p>注意此处的逻辑, 是块级元素出现在新行, 而非后一个元素出现在新行, 这个和\n 还是不一样的</p></blockquote><p>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。</p><p>常用的内联元素有:</p><pre><code class="html">&lt;a&gt;        可定义锚以及超链接&lt;span&gt;        组合文档中的行内元素&lt;textarea&gt;        多行文本输入控件&lt;img&gt;        向网页中嵌入一张图像&lt;input&gt;        输入框&lt;label&gt;        为input进行标记/标注&lt;strong&gt;        语气更强的强调内容&lt;abbr&gt;        表示一个缩写形式&lt;acronym&gt;        表示只取title中首字母的缩写形式&lt;b&gt;        字体加粗&lt;big&gt; &lt;small&gt;       大号字体加粗&lt;br&gt;        换行&lt;code&gt;        定义计算机代码文本&lt;em&gt;        定义为强调的内容&lt;i&gt;        斜体文本效果&lt;q&gt;        定义短的引用&lt;s&gt;    表示不准确不相关，却不应当给予删除的内容&lt;sub&gt;        定义下标文本&lt;sup&gt;        定义上标文本</code></pre><blockquote><p>默认而言元素的类型与 CSS 显示类型相关, 但改变 CSS 显示类型并不会改变元素的分类<br>但是直接理解为盒模型中的默认显示类型更加容易理解,</p></blockquote><p>其中介绍两种最常用的无语义元素</p><h2 id="span"><a href="#span" class="headerlink" title="span"></a>span</h2><p>一种无语义的块内元素, 可以很方便的应用各种 css 与 Js 效果</p><pre><code class="html">&lt;span style=&quot;font-size: 32px; margin: 21px 0; display: block;&quot;&gt;一个伪装的标题&lt;/span&gt;</code></pre><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><p>一种无语义的块元素, 可以很方便的作为页面布局的工具</p><blockquote><p>但是需要注意, 特别是 div, 常常被明显的滥用, 这不利于代码的编写与障碍人群对内容的理解, 尽可能采用有语义测元素</p></blockquote><h1 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h1><h2 id="列表-ul-x2F-ol"><a href="#列表-ul-x2F-ol" class="headerlink" title="列表 ul&#x2F;ol"></a>列表 ul&#x2F;ol</h2><p>ul 代表无序清单, ol 代表有序清单, 其中的项目由 li 包裹, li 和 ul&#x2F;ol 都是块级元素, 你可以在块内进一步增加布局, 理论上你也可以在 li 中进一步嵌套列表, 比如下面这个例子:</p><pre><code class="html">&lt;ul&gt;    &lt;li&gt;        &lt;h1&gt;标题&lt;/h1&gt;        &lt;p&gt;内容&lt;/p&gt;    &lt;/li&gt;&lt;/ul&gt;</code></pre><h2 id="重点强调"><a href="#重点强调" class="headerlink" title="重点强调"></a>重点强调</h2><p>通常, 诸如粗体斜体等都可以通过<code>&lt;span&gt;</code>与 CSS 样式实现, 但是 html 提供了一些文本意义上的内容帮助快速的完成重点强调工作:</p><ul><li><code>&lt;em&gt;</code> 一种斜体的强调</li><li><code>&lt;strong&gt;</code> 一种加粗的强调</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/i"><code>&lt;i&gt;</code></a>  被用来传达传统上用斜体表达的意义：外国文字，分类名称，技术术语，一种思想……</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/b"><code>&lt;b&gt;</code></a>  被用来传达传统上用粗体表达的意义：关键字，产品名称，引导句……</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/u"><code>&lt;u&gt;</code></a>  被用来传达传统上用下划线表达的意义：专有名词，拼写错误……</li></ul><h1 id="链接-a"><a href="#链接-a" class="headerlink" title="链接 a"></a>链接 a</h1><p>最基础的链接格式只需要包含 href, 你也可以声明 title:</p><pre><code class="html">&lt;a href=&quot;https://www.mozilla.org/zh-CN/&quot;   title=&quot;了解 Mozilla 使命以及如何参与贡献的最佳站点。&quot;&gt;Mozilla 主页&lt;/a&gt;</code></pre><p>当你想要让一个元素转化为超链接时, 需要让<code>&lt;a&gt;</code>包裹其他元素, 特别是在使用<code>&lt;img&gt;</code>的时候:</p><pre><code class="html">&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot;&gt;  &lt;img src=&quot;mdn_logo.svg&quot; alt=&quot;MDN Web 文档主页&quot; /&gt;&lt;/a&gt;</code></pre><p>当指向的是需要下载的资源时, 可以通过 download 属性来指定下载的名称</p><pre><code class="html">&lt;a href=&quot;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=zh-CN&quot;   download=&quot;firefox-latest-64bit-installer.exe&quot;&gt;  下载最新的 Firefox 中文版 - Windows（64 位）&lt;/a&gt;</code></pre><p>可以通过 target 属性选择链接打开的方式</p><ul><li><code>_self</code>：当前页面加载。（默认）</li><li><code>_blank</code>：通常在新标签页打开，但用户可以通过配置选择在新窗口打开</li></ul><pre><code class="html">&lt;a href=&quot;https://www.example.com/video-stream/&quot; target=&quot;_blank&quot;&gt;    观看视频（将在新标签页中播放）  &lt;/a&gt;</code></pre><h2 id="统一资源定位符（URL）与路径（path）"><a href="#统一资源定位符（URL）与路径（path）" class="headerlink" title="统一资源定位符（URL）与路径（path）"></a>统一资源定位符（URL）与路径（path）</h2><ul><li>指向当前目录</li></ul><pre><code class="html">&lt;p&gt;  要联系某位工作人员，请访问我们的&lt;a href=&quot;contacts.html&quot;&gt;联系人页面&lt;/a&gt;。&lt;/p&gt;</code></pre><blockquote><p>在没有指定特定的 URL 的情况下，大多数 web 服务器会默认访问加载  <code>index.html</code>  这类页面</p></blockquote><ul><li>指向子目录</li></ul><pre><code class="html">&lt;p&gt;请访问我的&lt;a href=&quot;projects/index.html&quot;&gt;项目主页&lt;/a&gt;。&lt;/p&gt;</code></pre><ul><li>指向上级目录</li></ul><pre><code class="html">&lt;p&gt;点击打开&lt;a href=&quot;../pdfs/project-brief.pdf&quot;&gt;项目简介&lt;/a&gt;。&lt;/p&gt;</code></pre><ul><li>文档片段(文档内位置)<br>要指向文档内位置, 需要先给目标元素分配 id, 后通过#id 访问</li></ul><pre><code class="html">&lt;p&gt;  要提供意见和建议，请将信件邮寄至  &lt;a href=&quot;contacts.html#Mailing_address&quot;&gt;我们的地址&lt;/a&gt;。&lt;/p&gt;</code></pre><p>以上给出的都是相对 URL, 如果需要使用绝对路径则需要补充域名<code>https://www.example.com/projects/index.html</code></p><h1 id="图片-img"><a href="#图片-img" class="headerlink" title="图片 img"></a>图片 img</h1><pre><code class="html">&lt;img src=&quot;images/dinosaur.jpg&quot;     alt=&quot;The head and torso of a dinosaur skeleton&quot;&gt;</code></pre><p>如果想要为图片添加说明文字, 使用语义容器<code>&lt;figure&gt;</code>和<code>&lt;figcaption&gt;</code>是更好的选择</p><pre><code class="html">&lt;figure&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/mdn/dinosaur_small.jpg&quot;      alt=&quot;一只恐龙头部和躯干的骨架，它有一个巨大的头，长着锋利的牙齿。&quot;      width=&quot;400&quot;      height=&quot;341&quot;&gt;  &lt;figcaption&gt;曼彻斯特大学博物馆展出的一只霸王龙的化石&lt;/figcaption&gt;&lt;/figure&gt;</code></pre><h1 id="音视频-video-audio"><a href="#音视频-video-audio" class="headerlink" title="音视频 video, audio"></a>音视频 video, audio</h1><p>一个典型的 video 是这样的:</p><pre><code class="html">&lt;video src=&quot;rabbit320.webm&quot; controls&gt;  &lt;p&gt;你的浏览器不支持 HTML5 视频。可点击&lt;a href=&quot;rabbit320.mp4&quot;&gt;此链接&lt;/a&gt;观看&lt;/p&gt;&lt;/video&gt;</code></pre><ul><li>controls 使得使用者可以控制视频的播放</li><li>video 标签内的内容称为后备内容, 在 video 标签不兼容的时候显示</li></ul><p>video 还有一些实用的属性</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#width"><code>width</code></a>  和  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#height"><code>height</code></a><br>你可以用属性控制视频的尺寸，也可以用  <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS">CSS</a>  来控制视频尺寸。无论使用哪种方式，视频都会保持它原始的长宽比 — 也叫做<strong>纵横比</strong>。如果你设置的尺寸没有保持视频原始长宽比，那么视频边框将会拉伸，而未被视频内容填充的部分，将会显示默认的背景颜色。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#autoplay"><code>autoplay</code></a><br>这个属性会使音频和视频内容立即播放，即使页面的其他部分还没有加载完全。建议不要应用这个属性在你的网站上，因为用户们会比较反感自动播放的媒体文件。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#loop"><code>loop</code></a><br>这个属性可以让音频或者视频文件循环播放。同样不建议使用，除非有必要。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#muted"><code>muted</code></a><br>这个属性会导致媒体播放时，默认关闭声音。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#poster"><code>poster</code></a><br>这个属性指向了一个图像的 URL，这个图像会在视频播放前显示。通常用于粗略的预览或者广告。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#preload"><code>preload</code></a><br>这个属性被用来缓冲较大的文件，有 3 个值可选：</p><ul><li><code>&quot;none&quot;</code> ：不缓冲</li><li><code>&quot;auto&quot;</code> ：页面加载后缓存媒体文件</li><li><code>&quot;metadata&quot;</code> ：仅缓冲文件的元数据</li></ul></li></ul><h2 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h2><pre><code class="html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=19390801&amp;bvid=BV1bW411n7fY&amp;cid=31621681&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</code></pre><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-allowfullscreen"><code>allowfullscreen</code></a><br>如果设置，<code>&lt;iframe&gt;</code>则可以通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API">全屏 API</a>  设置为全屏模式（稍微超出本文的范围）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-frameborder"><code>frameborder</code></a><br>如果设置为 1，则会告诉浏览器在此框架和其他框架之间绘制边框，这是默认行为。0 删除边框。不推荐这样设置，因为在  <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS">CSS 中</a>可以更好地实现相同的效果。<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border"><code>border</code></a><code>: none;</code></p></li><li><p>[<code>src</code>](<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-src">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-src</a><br>该属性与  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> &#x2F; 元素表示文档中的图像。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img"><code>&lt;img&gt;</code></a>一样包含指向要嵌入文档的 URL 路径。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-width"><code>width</code></a>  和  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-height"><code>height</code></a><br>这些属性指定你想要的 iframe 的宽度和高度。</p></li></ul><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-sandbox"><code>sandbox</code></a><br>该属性需要在已经支持其他  <code>&lt;iframe&gt;</code>  功能（例如 IE 10 及更高版本）但稍微更现代的浏览器上才能工作，该属性可以提高安全性设置；我们将在下一节中更加详细地谈到。</li></ul><blockquote><p>始终使用  <code>sandbox</code>  属性来保证安全!</p></blockquote><h1 id="表格-td-x2F-tr"><a href="#表格-td-x2F-tr" class="headerlink" title="表格 td&#x2F;tr"></a><em>表格 td&#x2F;tr</em></h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web">web 入门 - 学习 Web 开发 | MDN (mozilla.org)</a></p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点仓库的 star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontEnd </tag>
            
            <tag> updating </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win桌面美化方案分享-1</title>
      <link href="/2023/07/3a730b102c6e.html"/>
      <url>/2023/07/3a730b102c6e.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_think.png" alt="cover"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>考虑到之前的进两年桌面一直在迭代，不过最近半年倒是趋向了稳定，先暂时记录下目前的配置和具体的原因叭。</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20230702185011.png" alt="桌面图 base on raw-github"></p><h1 id="配置列表"><a href="#配置列表" class="headerlink" title="配置列表"></a>配置列表</h1><table><thead><tr><th>软件名称</th><th>功能简述</th><th>下载地址</th></tr></thead><tbody><tr><td>RoundedTB</td><td>任务栏圆角、简化</td><td><a href="https://github.com/torchgm/RoundedTB">GitHub</a></td></tr><tr><td>TaskBarHider</td><td>隐藏任务栏</td><td><a href="https://www.zhihu.com/question/48978062/answer/296850493">知乎-李昂不是 Leon</a></td></tr><tr><td>WinDynamicDesktop</td><td>仿 Mac 壁纸切换</td><td><a href="https://github.com/t1m0thyj/WinDynamicDesktop">WinDynamicDesktop</a></td></tr><tr><td>Droptop(base on rainmeter)</td><td>仿 Mac 任务栏</td><td><a href="https://github.com/Droptop-Four">Droptop Four (github.com)</a></td></tr><tr><td>Rainmeter</td><td>桌面美化的基础</td><td><a href="https://www.rainmeter.net/">Rainmeter</a></td></tr><tr><td>utools</td><td>快捷插件平台</td><td><a href="https://u.tools/">uTools 官网 - 新一代效率工具平台</a></td></tr><tr><td>Windows Auto Dark</td><td>系统明暗自动切换</td><td><a href="https://github.com/AutoDarkMode/Windows-Auto-Night-Mode">Auto Dark</a></td></tr></tbody></table><h2 id="RoundedTB"><a href="#RoundedTB" class="headerlink" title="RoundedTB"></a>RoundedTB</h2><p>老朋友了, 结合 Win11, 可以很方面的将原有的任务栏转化为居中的格式, 也是十分的美观, 因此就把 TranslucentTB 抛弃了, 毕竟透明的任务栏虽然美观, 但是使用起来字体颜色常常和壁纸不适配, 想看个时间太难了.</p><h2 id="WinDynamicDesktop-amp-Windows-Auto-Dark"><a href="#WinDynamicDesktop-amp-Windows-Auto-Dark" class="headerlink" title="WinDynamicDesktop &amp; Windows Auto Dark"></a>WinDynamicDesktop &amp; Windows Auto Dark</h2><p>可以参考文章 <a href="/2023/07/2d6b6945b781.html">Windows Auto Dark 配置</a>, 简单来说让系统的壁纸和主题颜色时间自动变化, 其他软件只需要跟随系统主题切换就可以了.</p><h2 id="TaskBarHider"><a href="#TaskBarHider" class="headerlink" title="TaskBarHider"></a>TaskBarHider</h2><p>将任务栏锁死在隐藏状态, 主要也是为了美观, 但是目前用的少了, 毕竟虽然 Droptop 可以替代大部分的功能, 但是用起来还是 Win 的任务栏最方便.</p><h2 id="Droptop"><a href="#Droptop" class="headerlink" title="Droptop"></a>Droptop</h2><p>基本复刻了 Mac 的任务栏, 但是在跟随软件功能等方面还是没法实现, 大部分操作都还算是流畅, 把一些常用的软件分类到下拉栏中(免费版提供两个选项貌似)还是蛮方便的.<br>需要先安装Rainmeter!</p><h2 id="Rainmeter"><a href="#Rainmeter" class="headerlink" title="Rainmeter"></a>Rainmeter</h2><p>Win桌面美化的鼻祖与集大成者, 有海量的插件可以使用. 但是主要存在两个问题: 一个是插件数量多了之后容易卡死, 当其代替了任务栏等的功能时容易烦躁; 第二个问题是因为日常中存在频繁的连接显示器操作, 在不同屏幕尺寸下小的组件经常会发生错位, 久而久之就懒得维护了, 干脆放弃掉. 未来如果解决了问题可能会再基于Rainmeter补充一些插件, 写一篇博客啥的.</p><h2 id="utools"><a href="#utools" class="headerlink" title="utools"></a>utools</h2><p>个人用的比较习惯的快捷指令平台, 平常搜索、翻译、查找文件(基于Everything)、截图文字识别啥的都很方便，市面上还有几家类似的, 选择一个习惯的用就可以了, 我个人选择utools的原因主要是相对更美观. </p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>目前来看桌面的美化暂时到达了一个停当, 未来可能在学一些人机交互方面的知识后再做一些更深入的调整和美化, 进一步平衡美观与效率大概是这个栏目的宗旨叭.</p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点仓库的star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Win美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语言基础</title>
      <link href="/2023/07/c23ca0ad1154.html"/>
      <url>/2023/07/c23ca0ad1154.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_write_2.png" alt="cover"></p><p><del>二下的数据管理技术感觉大半是 ChatGPT 帮忙写的</del>，为了避免以后 SQL 一条写不出来的窘境，赶紧记录复习一下。</p><h1 id="什么是-SQL"><a href="#什么是-SQL" class="headerlink" title="什么是 SQL"></a>什么是 SQL</h1><p>SQL（Structured Query Language）是一种用于管理关系型数据库的编程语言。它允许用户对数据库进行查询、插入、更新和删除操作，以及创建和修改表、视图、存储过程和触发器等数据库对象。</p><p>简而言之，SQL 允许我们完成对数据库的增删改查操作，并完成数据库的表操作。</p><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><p>表操作是数据库的基础，对表的增删改可以在给定的数据库中操作表而非表中的数据。</p><h2 id="创建表-CREATE"><a href="#创建表-CREATE" class="headerlink" title="创建表 CREATE"></a>创建表 CREATE</h2><p>创建表需要给出表名、字段名、字段类型与约束</p><pre><code class="sql">CREATE TABLE Student    (Sno CHAR(5) NOT NULL UNIQUE,    Sname CHAR(20) UNIQUE,    Ssex CHAR(1),    Sage INT,    Sdept VARCHAR(15),    Primary key (Sno, Cno));    FOREIGN KEY (column2) REFERENCES other_table(other_column)</code></pre><p>其中比较常用的操作包括：</p><pre><code class="sql"># 设定为非空不重复Sname CHAR(20) NOT NULL UNIQUE,# 设置为主键Sno CHAR(5) primary key,/Sno CHAR(20) NOT NULL UNIQUE,Primary key (Sno);# 设置外键(引用他表主键)Cno CHAR(5)FOREIGN KEY (Cno) REFERENCES other_table(Cno)</code></pre><h2 id="删除表-DROP"><a href="#删除表-DROP" class="headerlink" title="删除表 DROP"></a>删除表 DROP</h2><pre><code class="sql"># 删除整个表DROP TABLE user;</code></pre><h2 id="修改表-ALTER"><a href="#修改表-ALTER" class="headerlink" title="修改表 ALTER"></a>修改表 ALTER</h2><pre><code class="sql">ALTER TABLE &lt;表名&gt;    [ ADD &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ]    [ DROP &lt;完整性约束名&gt;(列名) / &lt;列名&gt; ]    [ MODIFY &lt;列名&gt; &lt;数据类型&gt; ]；</code></pre><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="插入数据-INSERT"><a href="#插入数据-INSERT" class="headerlink" title="插入数据 INSERT"></a>插入数据 INSERT</h2><p>主要有两种插入方式:</p><pre><code class="sql"># 要求插入所有列对应数据INSERT INTO table_name    VALUES (value1,value2,value3,...);# 只插入指定列数据INSERT INTO table_name (column1,column2,column3,...)    VALUES (value1,value2,value3,...);</code></pre><h2 id="删除数据-DELETE"><a href="#删除数据-DELETE" class="headerlink" title="删除数据 DELETE"></a>删除数据 DELETE</h2><p>删除的条件语句可参考条件语句部分</p><pre><code class="sql">DELETE FROM table_name    WHERE condition;</code></pre><h2 id="修改数据-UPDATE"><a href="#修改数据-UPDATE" class="headerlink" title="修改数据 UPDATE"></a>修改数据 UPDATE</h2><pre><code class="sql">UPDATE table_name    SET column1 = value1, column2 = value2, ...    WHERE condition;</code></pre><blockquote><p>在 DELETE 和 UPDATE 语句中, 如果省略了 WHERE 语句, 则所有数据都会被删除!!!</p></blockquote><h2 id="条件语句-WHERE"><a href="#条件语句-WHERE" class="headerlink" title="条件语句 WHERE"></a>条件语句 WHERE</h2><p>条件语句为 SQL 提供了筛选的功能, 其中包含多种使用方法与语句.</p><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>SQL 提供了多种条件运算符, 和数学表达式基本相同</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><p>以下为一些常用实例:</p><pre><code class="sql"># 筛选文本SELECT * FROM Persons WHERE FirstName=&#39;Bush&#39;# 筛选数字select last_name,department from employees where department_id &lt;&gt; 90;</code></pre><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><p>一般用于连接多个条件表达式</p><pre><code class="sql">&amp;&amp;    ||    !    and    or</code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>主要用于实现具有某些共性的信息</p><pre><code class="sql"># like 多用于匹配正则字段where name like &#39;%a%&#39;; # 检索含有a的where name like &#39;刘%&#39;; # 检索姓刘的where name like &#39;刘_&#39;; #检索两个字姓刘的# 当通配符被占用时, 使用ESCAPE标识LIKE &#39;DB*_%i_ &#39; ESCAPE &#39;*&#39;# between and 区间查询where id between 100 and 120; # 检索id在100到120之间# in 类似于ENUM, 筛选属于值表where id in(&#39;IT_PROT&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;); # 检索id属于值表的# is null/is not null 是否为空where commission_pct IS NOT NULL;</code></pre><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><p>数据查询是 SQL 的核心, 相应的内容也更多一些.</p><p>基础语句:</p><pre><code class="sql">SELECT 属性列    FROM 表    WHERE 条件    GROUP BY 属性    ORDER BY 属性</code></pre><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>A AS B: 别名<br>SELECT LOWER(A): 小写字母<br>SELECT DISTINCT B: 消除重复行(默认为 ALL 不消除),紧随 SELECT<br>*: 全部</p><h4 id="集函数"><a href="#集函数" class="headerlink" title="集函数"></a>集函数</h4><p>COUNT,SUM, ANG, MAX, MIN<br>空值 NULL 不参与计算<br>当存在分组的时候, 针对分组计算, 没有分组的时候, 针对全部数据计算</p><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>SELECT 子句的列名列表中只能出现分组属性和集函数</p><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>只出现在 GROUP BY 的时候, 可以使用集函数</p><pre><code class="sql">select sno from SC        group by sno        having count(*)&gt;=3</code></pre><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY:"></a>ORDER BY:</h4><p>默认升序, 出现在 SELECT 语句的最后<br>升序：ASC；降序：DESC</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="自连接-JOIN"><a href="#自连接-JOIN" class="headerlink" title="自连接 JOIN"></a>自连接 JOIN</h4><p>FROM 多个表, 通过 WHERE 控制连接</p><pre><code class="sql">SELECT FIRST.Cno，SECOND.Cpno    FROM Course AS FIRST，Course AS SECOND    WHERE FIRST.Cpno = SECOND.Cno；</code></pre><h4 id="外连接-默认-OUTER-JOIN"><a href="#外连接-默认-OUTER-JOIN" class="headerlink" title="外连接(默认 OUTER JOIN)"></a>外连接(默认 OUTER JOIN)</h4><p>MySQL 中支持 LEFT JOIN 和 RIGHT JOIN<br>左右内外判断方法: 指向谁, 谁不会被删除</p><pre><code class="sql"># 查询所有学生的选课情况SELECT Student.Sno，Sname，Ssex， Sage，Sdept，Cno，Grade    FROM Student LEFT Join SC on Student.Sno = SC.Sno；</code></pre><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询:"></a>子查询:</h3><p>多数情况可以插入到 WHERE, FROM, HAVING 中<br>相关子查询: 取外层查询中的元组判断是否满足内层查询条件<br>不相关子查询: 子查询得到的临时表&#x2F;值表用于父查询</p><h4 id="IN-子查询"><a href="#IN-子查询" class="headerlink" title="IN 子查询:"></a>IN 子查询:</h4><p>先得到查询顺序, 将第一步查询作为第二步查询的子条件<br>确切知道内层查询返回单值时, 可用比较运算符</p><pre><code class="sql">SELECT Sno，Sname，Sdept    FROM Student    WHERE Sdept IN        (SELECT Sdept            FROM Student            WHERE Sname = &#39;刘晨&#39;)；</code></pre><p>有 ANY&#x2F;ALL 子查询<br>any 为存在, all 为任意</p><h4 id="EXIST"><a href="#EXIST" class="headerlink" title="EXIST"></a>EXIST</h4><p>主要有以下应用:</p><p>全选: 不存在一门课程没有被选择</p><pre><code class="sql">select S,SNAME -- 在 S 表里选 S，SNAMEfrom Swhere not exists -- 不存在    (select * -- 课程    from C       where not exists -- 没有        (select * -- 被该生选择的课程        from SC        where SC.S=S.S and SC.C=C.C)) -- 相关查询，三个表进行连接</code></pre><p>至少选了一个: 存在一门课有被选择</p><pre><code class="sql">select S,SNAME -- 在 S 表里选 S，SNAMEfrom Swhere exists -- 存在    (select * -- 课程    from C    where exists -- 有        (select * -- 被该生选择的课程        from SC        where SC.S=S.S and SC.C=C.C)) -- 相关查询，三个表进行连接</code></pre><p>没有全选: 存在一门课没有被选择</p><pre><code class="sql">select S,SNAME -- 在 S 表里选 S，SNAMEfrom Swhere exists -- 存在    (select * -- 课程    from C    where not exists -- 没有        (select * -- 被该生选择的课程        from SC        where SC.S=S.S and SC.C=C.C)) -- 相关查询，三个表进行连接</code></pre><p>全部没选: 不存在一门课被选择</p><pre><code class="sql">select S,SNAME -- 在 S 表里选 S，SNAMEfrom Swhere not exists -- 不存在    (select * -- 课程    from C    where exists -- 有        (select * -- 被该生选择的课程        from SC        where SC.S=S.S and SC.C=C.C)) -- 相关查询，三个表进行连接</code></pre><p>选择了全部的 A: 全选: 非+非<br>包含了 A 选择的 B: 在全选基础上, 加条件</p><pre><code class="sql">SELECT DISTINCT a.name    FROM Actor a, Play p, Role r    WHERE p.author = ‘Great Writer’ AND p.play_id = r.play_id AND r.actor_id = a.actor_id    AND a.actor_id NOT IN        (SELECT r2.actor_id            FROM Role r2, Play p2            WHERE p2.author = ‘Nobody’ AND p2.play_id = r2.play_id)Select name, title    from play p inner join        (actor a left outer join role r on a.actor_id= r.actor_id)        on p.play_id=r.play_id</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><pre><code class="sql">CREATE VIEW Student(Sno，Sname，Ssex，Sage，Sdept)    AS    SELECT SX.Sno，SX.Sname，SY.Ssex，SX.Sage，SY.Sdept        FROM SX，SY        WHERE SX.Sno = SY.Sno；    WITH CHECK OPTION</code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>后续再做更新, 大部分时候根据模板实现即可</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.runoob.com/sql/sql-where.html">SQL WHERE 子句 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/weixin_41885239/article/details/115873583">(29 条消息) SQL 语句之条件查询–WHERE(where)<em>sql where</em>远方的旅行者的博客-CSDN 博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Auto Dark 配置</title>
      <link href="/2023/07/2d6b6945b781.html"/>
      <url>/2023/07/2d6b6945b781.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_seaside.png" alt="cover"><br>众所周知，Windows 本身并不提供关于日夜主题变换的选项，所以统合了下几款软件，来实现自动的日夜主题切换。以下三款软件基本都是开箱即用，部分需要链接 github。</p><h2 id="系统软件：Auto-Dark-Mode"><a href="#系统软件：Auto-Dark-Mode" class="headerlink" title="系统软件：Auto Dark Mode"></a>系统软件：Auto Dark Mode</h2><p><a href="https://github.com/AutoDarkMode/Windows-Auto-Night-Mode">GitHub</a> <a href="https://apps.microsoft.com/store/detail/auto-dark-mode/XP8JK4HZBVF435">Microsoft Store</a><br>根据设定时间&#x2F;日出日落来自动切换系统深浅色主题，可以看作是所有 Autodark 的基础（其他的插件等都需要&#x2F;可以依赖系统调整来实现）。而且软件还支持 office 等软件的切换与场景的识别（比如游戏中不切换，不过还未实验）。</p><h2 id="浏览器插件：Dark-Reader"><a href="#浏览器插件：Dark-Reader" class="headerlink" title="浏览器插件：Dark Reader"></a>浏览器插件：Dark Reader</h2><p><a href="https://github.com/darkreader/darkreader">GitHub</a> <a href="https://microsoftedge.microsoft.com/addons/detail/dark-reader/ifoakfbpdcdoeenechcleahebpibofpc/">Edge</a> <a href="https://darkreader.org/safari/">Safari</a> <a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh/">Chrome</a><br>可以跟随系统主题或设定时间来自动切换浏览器的背景，还可以根据网页的具体内容来调整显示，相当的方便。跟随系统主题设置在开启&#x2F;关闭开关的右侧。</p><h2 id="壁纸软件：Win-Dynamic-Desktop"><a href="#壁纸软件：Win-Dynamic-Desktop" class="headerlink" title="壁纸软件：Win Dynamic Desktop"></a>壁纸软件：Win Dynamic Desktop</h2><p><a href="https://github.com/t1m0thyj/WinDynamicDesktop">GitHub</a><br>根据时间来修改壁纸（就像 MacOs 那样），软件内提供了 Mac 的壁纸（需要连接 github 下载）。</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>然后只要打开开机自启动&#x2F;手动添加就可以啦。</p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点仓库的star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Win美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从美化到消灭！Windows 任务栏美化教程</title>
      <link href="/2023/07/3c881096ac9a.html"/>
      <url>/2023/07/3c881096ac9a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_seaside_2.png" alt="cover"><br>任务栏的美化经历过无数次，期间也伴随着 Win11 的更新，经历了从默认-美化-默认-美化-消灭的流程，干脆总结下踩过的坑叭！</p><h1 id="任务栏的美化"><a href="#任务栏的美化" class="headerlink" title="任务栏的美化"></a>任务栏的美化</h1><h2 id="任务栏透明：TranslucentTB"><a href="#任务栏透明：TranslucentTB" class="headerlink" title="任务栏透明：TranslucentTB"></a>任务栏透明：TranslucentTB</h2><p><a href="https://www.microsoft.com/store/apps/9pf4kz2vn4w9?ocid=badge">Microsoft Store</a><br><a href="https://github.com/TranslucentTB/TranslucentTB">GitHub</a><br>可以将任务栏透明化&#x2F;半透明化，也提供了很多不同场景下的自定义选项，唯一的问题是在 Win11 下会出现不完全的情况（如果没有的话那就是修复了），可以结合下一个软件修复。</p><h2 id="任务栏圆角：RoundedTB"><a href="#任务栏圆角：RoundedTB" class="headerlink" title="任务栏圆角：RoundedTB"></a>任务栏圆角：RoundedTB</h2><p><a href="https://apps.microsoft.com/store/detail/roundedtb/9MTFTXSJ9M7F?hl=en-us&gl=china">Microsoft Store</a><br><a href="https://github.com/torchgm/RoundedTB">GitHub</a><br>可以实现将任务栏四周添加圆角，微微悬浮的效果（有点类似 macOS 的 dock 栏），可以在 Win11 TranslucentTB 出现黑线时直接隐藏黑线（神奇的解决方法）。</p><h2 id="Win11：Win-与图标居中"><a href="#Win11：Win-与图标居中" class="headerlink" title="Win11：Win 与图标居中"></a>Win11：Win 与图标居中</h2><p>直接在设置-个性化-任务栏-任务栏行为中居中即可。</p><h1 id="消灭任务栏"><a href="#消灭任务栏" class="headerlink" title="消灭任务栏"></a>消灭任务栏</h1><h2 id="为什么要消灭任务栏"><a href="#为什么要消灭任务栏" class="headerlink" title="为什么要消灭任务栏?"></a>为什么要消灭任务栏?</h2><p>原因的话主要有 x 点吧:</p><ul><li>个人比较喜欢大屏的沉浸体验，又懒得天天按 F11。</li><li>系统的自动隐藏任务栏太过于灵敏了，经常点下面的按钮点着点着就点到任务栏去了。</li><li>在[[Rainmeter美化：功能类插件]]中，添加了自用的 docker，常用的一些功能都集成到上边了，至于打开的文件，Win+Tab 已经够用了。</li><li>对于系统设置等等功能，Win+X 或者[[utools 的基础使用]]就可以替代了，win 界面也能够帮助我找到大部分我需要的东西了。<br>于是，直接把任务栏给消灭掉了。</li></ul><h2 id="消灭任务栏：TaskBarHider"><a href="#消灭任务栏：TaskBarHider" class="headerlink" title="消灭任务栏：TaskBarHider"></a>消灭任务栏：TaskBarHider</h2><p><a href="https://www.zhihu.com/question/48978062/answer/296850493">知乎-李昂不是 Leon</a><br><a href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1bqj88KB">panbaidu(3d72)</a></p><p>很小的软件，用 Ctrl+~来彻底隐藏&#x2F;显示，相当方便了（测试 Win7 与 Win11 无问题，Win10 貌似有点小 bug）</p><blockquote><p>如果你有一些意见或建议, 欢迎评论! 你的意见对我很重要.<br>如果觉得有帮助的话, 麻烦点一点仓库的star，感激不尽~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Win美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github Action + obsidian 指南</title>
      <link href="/2023/07/06a07d3ab9d6.html"/>
      <url>/2023/07/06a07d3ab9d6.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/cover_write.png" alt="cover"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><hr><p>暑假回来打算把自己的博客重新整理一下，一看才发现上一次电脑重装的时候没把博客的本地数据给存下来，这下好了，不得不重新搭建一遍了。正好之前的 Blog 采取的是本地文件+hexo 部署的手动方式，编写使用的 Typera，现在切换到 Obsidian 以后多了不少的实用工具，也一起更新一下。本以为只需要简单的再部署一遍就 OK 了，没想到踩了一堆的坑，正好一起记录一下。</p><p>本文的主要内容：<br>hexo 本地搭建<br>如何更换主题（以<a href="https://github.com/Haojen/hexo-theme-Claudia">Haojen&#x2F;hexo-theme-Claudia</a>为例）<br>网站仓库搭建<br>hexo 线上部署<br>更换个人域名<br>源码仓库搭建<br>Github Action 的实现<br>obsidian 配置博客仓库</p><blockquote><p>本项目基于 windows 平台，但大部分部署过程应该大同小异，可以参考使用。</p></blockquote><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><table><thead><tr><th>日期</th><th>主要内容</th></tr></thead><tbody><tr><td>2023.07.01</td><td>修正部分错误</td></tr><tr><td>2023.07.17</td><td>补充“迁移至新电脑”， 补充 git 安装教程，更新 github action 部分配置</td></tr></tbody></table><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><hr><p>为了避免搭着搭着忘记自己在干啥了，先整理一下思路吧。</p><p>第一步当然是搭建 hexo 静态博客，静态也就意味着部署 deploy 时上传为一个处理后的静态网站，直接在这个网站源码中塞入 md 文件显然无法正常显示。hexo 采取的是本地搭建 + 本地编写 + 线上部署的方式，也就是说，后续会涉及到两个主要的代码仓库：源码仓库与页面仓库，一般的实现方式为源码本地存储，页面仓库使用 GithubPage 实现，在这里我们将源码也上传到了个人的私有仓库中，一方面可以实现博客文章的线上存储，另一方面也方便我们在其他电脑上重新搭建我们的博客环境。</p><p>那么问题随之而来，我们原先搭建好的博客可以在本地通过<code>hexo g &amp; hexo d</code>完成部署，那么此时是否意味着我们每次还需要多执行一次<code>git commit push</code>来完成源码的存储呢？实际上并不需要，我们可以通过 github action 来实现每次上传源码仓库的同时，自动通过一个“虚拟机”来完成 hexo 的部署工作，换而言之，更新前的工作流如下：</p><ul><li>hexo n 创建新文章 –&gt; 完成文章编写 –&gt; <code>hexo g &amp; hexo d</code><br>更新后的工作流如下:</li><li>hexo n 创建新文章 –&gt; 完成文章编写 –&gt; <code>git add &amp; commit &amp; push</code></li></ul><p>那么在此基础上, 如何使用 obsidian 来管理博文的创建、编写和部署呢？这里使用了模板和 git 插件等，最后形成的工作流就是以下：</p><ul><li>obsidian 模板创建新文章 –&gt; 完成文章编写 –&gt; obsidian 中<code>commit &amp; push</code></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><hr><p>本文主要参考了以下博客，一些其他的 issue 之类可能有所遗漏：</p><p>使用 github 与 hexo 完成网站搭建的教程相当多，仅给出一个参考：<br><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a><br>采用的主题如下:<br><a href="https://github.com/Haojen/hexo-theme-Claudia">Haojen&#x2F;hexo-theme-Claudia: 📌 Concisely designed &amp; easy to config, match device dark mode, 90+ Lighthouse scoring (github.com)</a><br>官方文档, 包含基础的操作和编写格式:<br><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a><br>Obsidian 与 hexo 配合相关:<br><a href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">Hexo + Obsidian + Git 完美的博客部署与编辑方案 | EsunR-Blog</a></p><p>全自动部署核心部分，评论区提供了不少问题的解决方案：<br><a href="https://akilar.top/posts/f752c86d/">使用 Github Action 实现全自动部署 | Akilar の糖果屋</a></p><p>域名购买, 我买的阿里云的, 其他应该也大同小异:<br><a href="https://link.zhihu.com/?target=https://www.aliyun.com/">阿里云-为了无法计算的价值</a></p><h1 id="hexo-本地部署"><a href="#hexo-本地部署" class="headerlink" title="hexo 本地部署"></a>hexo 本地部署</h1><hr><h2 id="基础配置安装"><a href="#基础配置安装" class="headerlink" title="基础配置安装"></a>基础配置安装</h2><h3 id="nodeJs"><a href="#nodeJs" class="headerlink" title="nodeJs"></a>nodeJs</h3><p>需要安装以下内容:<br>nodeJs: 用于安装 hexo 和其他插件, 注意安装完成后需要配置环境变量<br><a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a><br><code>node -v</code> 和<code>npm -v</code> 检查是否安装成功</p><blockquote><p>在继续之前, 如果你已经大致了解创建 github 仓库的步骤, 可以选择跳转至源码仓库搭建部分, 先完成仓库的建立, 后在仓库路径中完成 hexo 的搭建.</p></blockquote><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>然后在电脑中创建一个文件夹作为 Blog 的本地存储位置, 例如 Blog, 随后在文件夹内右键使用 cmd:</p><p>使用 npm 命令安装 Hexo，输入：</p><pre><code class="bash">npm install -g hexo-cli</code></pre><p>安装完成后，初始化我们的博客，输入：</p><pre><code class="bash">hexo init blog</code></pre><p>注意，这里的命令都是作用在刚刚创建的 Blog 文件夹中。</p><p>为了检测我们的网站，分别按顺序输入以下命令：</p><pre><code class="bash">hexo new &#123;test post title&#125;hexo ghexo s</code></pre><p>这些命令在附录中有介绍，完成后，打开浏览器输入地址：</p><p>localhost:4000</p><p>就可以看出我们的博客网站啦(理论上是 Hello World)</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>后续我们会使用 git 完成线上仓库和部署的相关操作，如果还没有安装 git 的话需要安装一下。</p><p>参考以下文章完成<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git - 安装 Git (git-scm.com)</a>（可以选择一路默认配置下来，也可以调整一下安装路径。</p><p>完成安装后在任意路径文件夹下右键便可看到<code>git bash here</code>, 点击进入命令行界面。</p><p>如果是第一次使用 git， 将以下代码中<code>&quot;Your Name&quot;</code>与<code>&quot;email@example.com&quot;</code>替换为自己的用户名（与 github 保持一致）与邮箱（与 github 账户保持一致）后复制黏贴进命令行完成设置。</p><pre><code class="shell">git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot;</code></pre><p>如果在后续的任何 git 环节遇到了问题, 或者想深入了解一下 git(毕竟挺有用的不是吗?), 可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git 教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a>或者直接 Bing&#x2F;google，你的问题大概率已经有人遇到并解决了。</p><h4 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h4><p>git 使用 SSH 配置，配置后才能与 github 相连。<br>在 git bash 命令行中完成以下操作:</p><pre><code class="shell">ssh-keygen -t rsa -C &quot;email@example.com&quot;cd ~/.sshcat id_rsa.pub</code></pre><p>此时命令行应当返回 ssh-rsa 开头的字符串, 将其复制到 github 的<code>You-Settings-SSH and GPG Keys--New SSH Key</code>中, name 字段填写自己名字就行。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><hr><p>主题相当于预先编写好的网站美化, 比较出名的包含 Next, Butterfly 等, 这里介绍使用 Claudia 的具体方法, 以下内容主要基于<a href="https://github.com/Haojen/hexo-theme-Claudia/blob/master/README-CN.md">hexo-theme-Claudia&#x2F;README-CN.md at master · Haojen&#x2F;hexo-theme-Claudia · GitHub</a></p><p>进入 themes 文件夹，从 github 上 clone 主题</p><pre><code>git clone https://github.com/Haojen/hexo-theme-Claudia.git</code></pre><blockquote><p>注意! clone 结束后记得将主题从 git 的暂存区中删除, 不然后续上传源码仓库会报错!</p></blockquote><pre><code># 删除hexo-theme-Claudia下.git文件夹rm themes/hexo-theme-Claudia/.git# 这里直接删除了暂存区文件rm .git/index</code></pre><p>根目录下完成插件安装:</p><pre><code class="shell">#必要npm install hexo-renderer-pugnpm install hexo-renderer-sassnpm install hexo-generator-search#选择性安装# 如果需要添加订阅功能npm install hexo-generator-feed# 流程图功能npm install hexo-filter-flowchart --save# Emojinpm install hexo-filter-github-emojis --save# 搜索功能npm install hexo-generator-search --save# 数学公式npm install hexo-renderer-mathjax --save</code></pre><p>其他的配置可以参考<a href="https://github.com/Haojen/hexo-theme-Claudia/blob/master/README-CN.md">hexo-theme-Claudia-CN</a>自行实现, 完成配置后进入 hexo 配置文件_config.yml, 修改 theme 内容:</p><pre><code class="yml"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-Claudia</code></pre><p>注意, 此处的填写的名称为 themes 文件夹中对应主题文件夹的名称.</p><p>完成以上步骤后依次执行<code>hexo g</code>, <code>hexo s</code>查看是否成功使用主题, 如果失败可以尝试执行<code>hexo clean</code>后再次尝试运行.</p><p>到此为止, 我们已经在本地完成了基本的网站搭建工作, 接下来就是把他搬上线啦</p><h1 id="网站仓库搭建"><a href="#网站仓库搭建" class="headerlink" title="网站仓库搭建"></a>网站仓库搭建</h1><hr><p>在 github 中新建一个公开的, 名称为<code>&#123;your-blog&#125;.github.io</code>的仓库, 这个仓库用来存放我们部署的静态网页, 目前 github 默认的分支为 main 分支, 我们直接使用 main 分支进行部署. 在当前的 github 版本中, github Page 会自动启用, 我们在此部分不再关心.</p><p>在本地<code>_config.yml</code>中修改 deploy 的目标和 url 地址, 我们部署的时候会将产生的静态文件写入</p><pre><code class="yml"># URL## Set your site url here. For example, if you use GitHub Page, set url as &#39;https://username.github.io/project&#39;url: https://&#123;username&#125;.github.io/&#123;your-blog&#125;.github.io# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: &#39;git&#39;  repo: git@github.com:&#123;username&#125;/&#123;your-blog&#125;.github.io.git  branch: main</code></pre><p>保存后回到 cmd 中, 执行<code>hexo g &amp; hexo d</code>, 执行完成后查看仓库中是否有新的提交, 随后访问<code>https://&#123;username&#125;.github.io/&#123;your-blog&#125;.github.io</code>, 理论上你已经可以在互联网中查看到你的网页了!</p><p>如果访问出现 404 或其他问题, 尝试访问<code>&#123;your-blog&#125;.github.io</code>仓库的<code>Settings-Pages</code>, 查看 github Page 是否正确启用, 以及查看网址是否正确.</p><blockquote><p>如果你之前配置过其他博客站点, 他们可能会占用你希望访问的网址(特别是需要使用以前是用的域名时), 将其他占用仓库的 githubPage 取消自定义域名, 或者直接停用或转为 private, 然后刷新<code>&#123;your-blog&#125;.github.io</code>仓库通常可以解决问题.</p></blockquote><blockquote><p>_config.yml 中的 url 地址请以<code>&#123;your-blog&#125;.github.io</code>仓库的<code>Settings-Pages</code>中提供的为准.</p></blockquote><h2 id="使用你的域名"><a href="#使用你的域名" class="headerlink" title="使用你的域名"></a>使用你的域名</h2><p>访问<code>&#123;your-blog&#125;.github.io</code>仓库的<code>Settings-Pages</code>, 你可能注意到你可以为自己的网页选择自己的域名,这显然比让其他人打一大串 github.io 要方便多了.</p><p>首先, 选择一个域名平台购买一个自己喜欢的域名, 通常 com 域名更为通用, 当然价格也更贵, cn 和 top 使用的多一些, 价格也更实惠. 以下以阿里云为例, <a href="https://link.zhihu.com/?target=https://www.aliyun.com/">阿里云-为了无法计算的价值</a>, 遇到问题可以参考以下博客: <a href="https://zhuanlan.zhihu.com/p/338299590">hexo 绑定域名 - 知乎 (zhihu.com)</a></p><p>完成域名的购买, 这一环节的主要困难为钱包的问题.</p><p>随后进入域名控制台, 对自己的域名进行解析, 在此处需要添加以下记录:</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>记录值</th></tr></thead><tbody><tr><td>@</td><td>A</td><td>185.199.109.153</td></tr><tr><td>@</td><td>A</td><td>185.199.110.153</td></tr><tr><td>@</td><td>A</td><td>185.199.111.153</td></tr><tr><td>@</td><td>A</td><td>185.199.109.153</td></tr><tr><td>www</td><td>CNAME</td><td>{your-blog}.github.io</td></tr></tbody></table><p>然后回到<code>&#123;your-blog&#125;.github.io</code>仓库的<code>Settings-Pages</code>, 在 Custom domain 中填写你的域名<code>www.xxxx.xxx</code>, github Page 会自动完成 CNAME 的创建, 如果勾选 Enforce HTTPS, github 会自动完成 SSL 证书的签发.</p><blockquote><p>如果出现主题未能成功加载(也就是只包含了 html 内容), 可以尝试将_confg.yml 中的 url 修改为自己的域名, 或再次检查 url 是否填写错误.</p></blockquote><h1 id="源码仓库搭建"><a href="#源码仓库搭建" class="headerlink" title="源码仓库搭建"></a>源码仓库搭建</h1><p>在之前的环节里, 我们的 hexo 源码都只存放在了本地, 接下来我们希望把源码也上传 github 维护.</p><p>创建一个新的私有仓库<code>&#123;blogRepo&#125;</code>, 在本地根目录下执行以下命令:</p><pre><code class="shell"># 新建gitgit init# 建立提交git add .git commit -m &quot;repo init&quot;git remote add origin &#123;your Reposory Url&#125;git push -u origin main</code></pre><p>如果出现报错信息指向 themes 文件夹，考虑在安装主题的时候是否未将主题从暂存区中删除。<br>如果出现其他 git 仓库方面的问题，互联网检索是个更优的选择。</p><h1 id="Github-Action-的实现"><a href="#Github-Action-的实现" class="headerlink" title="Github Action 的实现"></a>Github Action 的实现</h1><p>接下来我们就要实现 github action， 它可以将持续性的完成网页的自动部署。这一部分主要参考了博客：<a href="https://akilar.top/posts/f752c86d/">使用 Github Action 实现全自动部署 | Akilar の糖果屋</a></p><p>首先，前往 github 个人<code>Settings -- Developers Settings -- Personnal access token</code>, 选择 classic 类型<code>Generate new Token</code>, 将该 Token 的<code>expiration date</code>设置为 none, 此时记得将 Token 复制出来!, 可以新建一个如下的 txt 文档记录:</p><pre><code># 在记事本中逐个记录# 本地地址[Blogroot]：D:\Blog\&#123;yourBlog&#125;#源码仓库[SourceRepo]：&#123;your name&#125;/&#123;blog-repo&#125;[SiteBlogRepo]  [GITHUBBLOGREPO]：&#123;your-blog&#125;.github.io[SiteUsername]  [GITHUBUSERNAME]：&#123;your name&#125;[SiteToken]  [GITHUBTOKEN]：&#123;your token here&#125;[GITHUBEMAIL]：&#123;your email&#125;</code></pre><p>再访问<code>Settings -- Actions -- General</code>, 将<code>Actions permissions</code>修改为<code>Allow all</code>, <code>Workflow permissions</code>修改为<code>Read and write</code></p><p>回到源码仓库, 访问<code>Settings -- Secrets and variables -- Newrepository secret</code>, 将 GITHUBEMAIL, GITHUBBLOGREPO, GITHUBUSERNAME, GITHUBTOKEN 依次填写.</p><p>然后在源目录的<code>.github</code>文件夹下, 创建<code>.github\workflows\autodeploy.yml</code>文件, 编写一下信息,:</p><blockquote><p>注意！需要提前本地查询<code>node -v</code>确定版本号, 本文档基于<code>node 16.9.1</code>编写</p></blockquote><pre><code class="yml"># 当有改动推送到master分支时，启动Actionname: 自动部署on:  push:    branches:      - main #2020年10月后github新建仓库默认分支改为main  release:    types:      - publishedjobs:  deploy:    runs-on: ubuntu-latest    steps:    - name: 检查分支      uses: actions/checkout@v3   #原v2支持至node12， 执行失败可尝试替换      with:        ref: main #2020年10月后github新建仓库默认分支改为main    - name: 安装 Node      uses: actions/setup-node@v3  #原v1支持至node12， 执行失败可尝试替换      with:        node-version: &quot;16.9.1&quot; #action使用的node版本，本地用node -v查询版本号。    - name: 安装 Hexo      run: |        export TZ=&#39;Asia/Shanghai&#39;        npm install hexo-cli -g    - name: 缓存 Hexo      uses: actions/cache@v3  #原v1支持至node12， 执行失败可尝试替换      id: cache      with:        path: node_modules        key: $&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles('**/package-lock.json')&#125;&#125;    - name: 安装依赖      if: steps.cache.outputs.cache-hit != &#39;true&#39;      run: |        npm install --save    - name: 生成静态文件      run: |        hexo clean        hexo generate    - name: 部署 #此处master:main 指从本地的master分支提交到远程仓库的main分支, 本地git的默认分支为master, 一般情况不需要修改      run: |        cd ./public        git init        git config --global user.name &#39;$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;&#39;        git config --global user.email &#39;$&#123;&#123; secrets.GITHUBEMAIL &#125;&#125;&#39;        git add .        git commit -m &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; $(date +&quot;%Z %Y-%m-%d %A %H:%M:%S&quot;) Updated By Github Actions&quot;        git push --force --quiet &quot;https://$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITHUBTOKEN &#125;&#125;@github.com/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITHUBBLOGREPO &#125;&#125;&quot; master:main</code></pre><p>随后将代码上传至仓库, 查看仓库的 Actions, 检查 workflows 是否正常工作, 点击最近一次的 workfows, 查看是否出现报错信息, 无报错信息则前往<code>&#123;your-blog&#125;.github.io</code>仓库检查 Actions 是否出发 deploy action, 如果执行成功则网页已成功通过 github Action 部署</p><blockquote><p>如果源码仓库出现警告<code>deploy: The process &#39;/usr/bin/git&#39; failed with exit code 128</code>, 进一步点击查看 Post 检查分支中是否出现错误<code>fatal: No url found for submodule path &#39;themes/hexo-theme-Claudia&#39; in .gitmodules</code>, 该错误说明 clone 结束后主题未从 git 的暂存区中删除, 删除后重试即可</p></blockquote><p>此时, 由于我们的部署工作在 github 上完成, 本地的部分文件无需提交至仓库, 点击根目录下<code>.gitignore</code>,添加以下内容:</p><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml</code></pre><blockquote><p>如果你很担心后续仓库的恢复会出现问题的话，也可以选择把所有内容都传上去，当然这样上传的速度就会慢一些了。</p></blockquote><h1 id="obsidian-配置博客仓库"><a href="#obsidian-配置博客仓库" class="headerlink" title="obsidian 配置博客仓库"></a>obsidian 配置博客仓库</h1><p>obsidian 可以很方便的管理、编写本地的 md 文件, 本部分做了一些初步的整合和优化操作, 来让编写博客的过程更加丝滑, 可参考博客<a href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">Hexo + Obsidian + Git 完美的博客部署与编辑方案 | EsunR-Blog</a></p><p>首先, 在 obsidian 中打开其他仓库, 打开我们的博客文件夹即可.</p><p>为了方便的完成博客的提交, 在第三方插件中下载<code>Obsidian Git</code>, 启用后即可使用<code>Ctrl + p</code>命令调用<code>commit all changes</code>和<code>push</code>操作, 当然, 我们也可以将命令进行集成, 比如<code>Commander</code>就可以进一步整合为一个命令.</p><p>显然, 通过 hexo n 来创建新文章太麻烦了, obsidian 提供的模板可以方便的创建新的文章.<br>在 source 下创建<code>_obsidian/PostTemplate.md</code>文件, 填写以下内容:</p><pre><code>---title: &#123;&#123;title&#125;&#125;author: &#123;yourname&#125;date: &#123;&#123;date&#125;&#125;tags: []---</code></pre><p>之后, 在设置-核心插件-模板中添加_obsidian 文件夹, 并在核心插件中启用模板, 就可以通过点击侧边栏中的模板快速创建 hexo 文章模板了</p><p>hexo 的 catagorys 维护相对较为复杂, 可以选择使用 hexo 的  <a href="https://blog.esunr.xyz/2022/07/hexo-auto-category">hexo-auto-category</a>插件, 在项目根目录下 npm install 即可, 插件会在部署时自动完成 category 的维护. 我们只需要在_posts 文件夹下创建文件夹即可格局文件夹进行 category 分类.</p><p>此外, obsidian 的<code>prettier</code>插件可以自动识别文章格式并添加 update 与 modify 时间, 相当推荐安装.<br>超链接,图片等目前采取的方案是改写 md 格式, 其他的一些配置我没有完全采用, 可以进一步参考博客<a href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">Hexo + Obsidian + Git 完美的博客部署与编辑方案 | EsunR-Blog</a>实现其他功能.</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>到此为止, 你应该已经完成了整一个博客和工作流的搭建! 再来回顾一下博客工作流:</p><ul><li>obsidian 中在 category 对应文件夹下创建新的 md 文件;</li><li>使用模板快速完成文件信息的填充</li><li>编写博客内容</li><li>在 obsidian 中执行<code>commit &amp; push</code>命令</li><li>博客文章顺利上线啦!</li></ul><p>后续应该会围绕美化、图床、CDN 加速、md 格式转换等再补充一篇文章，但那也是后话啦。<br>如果发现文中错误或问题，欢迎提问或私信（，要是感觉有帮助的话欢迎访问<a href="https://github.com/ZlxmChen/zlxmblog.github.io">仓库</a>求一个 star~</p><p><img src="https://raw.githubusercontent.com/ZlxmChen/ImgRepo/main/20230702093330.png" alt="image.png"></p><h1 id="迁移至新电脑"><a href="#迁移至新电脑" class="headerlink" title="迁移至新电脑"></a>迁移至新电脑</h1><blockquote><p>2024.09 Update:</p></blockquote><p>在无特殊情况下采用从 Git 仓库恢复会更加方便，具体流程如下：<br>默认完成 Git(username, email, SSH Key)的配置，完成 Obsidian 的安装</p><ol><li>在根路径下新建 Blog 文件夹</li><li>在 Terminal 中打开，安装 nodejs(网页链接)与 hexo 及其他插件</li></ol><pre><code>npm install -g hexo-cli#必要npm install hexo-renderer-pugnpm install hexo-renderer-sassnpm install hexo-generator-search# 如果需要添加订阅功能npm install hexo-generator-feed</code></pre><ol start="3"><li>使用 SSH 同步仓库（确保仓库已经更新到最新）</li></ol><pre><code>git clone git@github.com:[username]/[SourceRepo]</code></pre><ol start="4"><li>测试 hexo 与 git 部署：</li></ol><pre><code>cd [SourceRepo]hexo -vhexo g# hexo s</code></pre><ol start="5"><li>在 Obsidian 中打开 SourceRepo <code>重要！不然插件无法正常加载</code> ，测试运行</li></ol><p>以下为原始教程：</p><p>相比起原本的本地部署方案，该方案的一大优点便是便于迁移与恢复，以下仅考虑了最差的情况——从一穷二白开始恢复博客系统。</p><ol><li>完成 nodeJs，hexo，picGo，git 的安装以及 SSH Key 的配置（参考上文）与用户设置</li></ol><blockquote><p>注意! 本地生成的 SSH Key 与 github 中存储的并不相同，注意替换或修改，PicGo 配置需要使用到之前保存的 token；<br>如果是直接复制过来的仓库，那大概率在目录下直接安装 hexo 就可以了，然后直接尝试运行<code>hexo g</code>，<code>hexo s</code> 看看能不能正常部署。</p></blockquote><ol start="2"><li>完成插件安装（根据之前安装了哪些插件选择，以下为示例）</li></ol><pre><code class="shell">#必要npm install hexo-renderer-pugnpm install hexo-renderer-sassnpm install hexo-generator-search#选择性安装# 如果需要添加订阅功能npm install hexo-generator-feed# 流程图功能npm install hexo-filter-flowchart --save# Emojinpm install hexo-filter-github-emojis --save# 搜索功能npm install hexo-generator-search --save# 数学公式npm install hexo-renderer-mathjax --save</code></pre><ol start="3"><li>将仓库拉取到本地<br>git bash 中拉取源码仓库：</li></ol><pre><code>git clone https://github.com/&#123;your name&#125;/&#123;blog-repo&#125;</code></pre><p>如果你严格 follow 了全部的安装步骤，理论上已经可以在本地测试了：</p><pre><code>hexo ghexo s</code></pre><ol start="4"><li>obsidian 打开源码文件夹，obsidian 会自动识别安装的插件并完成相关配置。</li><li>与之前一样上传仓库，测试 github Action 能否正常执行。</li></ol><blockquote><p>如果在 github Action 部分出现<code>Invalid username or password.</code> 问题，可能是配置 PicGo 时手忙脚乱刷新了 Token，更新一下<code>Settings -- Secrets and variables -- Newrepository secret</code>中的 GITHUBTOKEN 字段。</p></blockquote><h1 id="修改自定义域名"><a href="#修改自定义域名" class="headerlink" title="修改自定义域名"></a>修改自定义域名</h1><p>访问<code>[SourceRepo]/source/CNAME</code>，修改为新的自定义域名</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="hexo-指令"><a href="#hexo-指令" class="headerlink" title="hexo 指令"></a>hexo 指令</h2><pre><code class="shell">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
